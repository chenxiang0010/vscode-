{
  "import": {
    "prefix": "import",
    "body": ["import $1 from '$2'"],
    "description": "import ... from ..."
  },
  "vue": {
    "prefix": "newVue",
    "body": ["new Vue({", "\t$1", "})"],
    "description": "new Vue()"
  },
  "取消 Vue 所有的日志与警告": {
    "prefix": "Vue-Config-Silent",
    "body": ["Vue.config.silent = ${1:true}"],
    "description": "取消 Vue 所有的日志与警告"
  },
  "自定义合并策略的选项": {
    "prefix": "Vue-Config-OptionMergeStrategies",
    "body": ["Vue.config.optionMergeStrategies$1"],
    "description": "自定义合并策略的选项"
  },
  "配置是否允许 vue-devtools 检查代码": {
    "prefix": "Vue-Config-Devtools",
    "body": ["Vue.config.devtools = ${1:true}"],
    "description": [
      "配置是否允许 vue-devtools 检查代码",
      "开发版本默认为 true",
      "生产版本默认为 false"
    ]
  },
  "获取错误信息和 Vue 实例": {
    "prefix": "Vue-Config-ErrorHandler",
    "body": [
      "Vue.config.errorHandler = function (err, vm, info) {",
      "\t// handle error",
      "\t// `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子",
      "\t// 只在2.2.0+可用",
      "}"
    ],
    "description": [
      "指定组件的渲染和观察期间未捕获错误的处理函数",
      "获取错误信息和 Vue 实例"
    ]
  },
  "为 Vue 的运行时警告赋予一个自定义处理函数": {
    "prefix": "Vue-Config-WarnHandler",
    "body": [
      "Vue.config.warnHandler = function (msg, vm, trace) {",
      "\t${1:// `trace` 是组件的继承关系追踪}",
      "}"
    ],
    "description": "为 Vue 的运行时警告赋予一个自定义处理函数"
  },
  "ignoredElements": {
    "prefix": "VueConfigIgnoredElements",
    "body": ["Vue.config.ignoredElements = [", "\t'${1}'", "]$0"],
    "description": "Vue.config.ignoredElements"
  },
  "自定义键位别名(修饰符)": {
    "prefix": "Vue-Config-KeyCodes",
    "body": [
      "Vue.config.keyCodes = {",
      "\t${//键盘事件对应的键码:https://www.cnblogs.com/wuhua1/p/6686237.html }",
      "}"
    ],
    "description": "自定义键位别名(修饰符)"
  },
  "在浏览器开发工具中启用对组件的性能追踪": {
    "prefix": "Vue-Config-Performance",
    "body": ["Vue.config.performance = ${1:true}"],
    "description": [
      "在浏览器开发工具中启用对组件初始化、编译、渲染和打补丁的性能追踪。",
      "只适用于开发模式和支持 performance.mark API 的浏览器上。"
    ]
  },
  "阻止 vue 在启动时生成生产提示": {
    "prefix": "Vue-Config-ProductionTip",
    "body": ["Vue.config.productionTip = ${1:false}"],
    "description": "阻止 vue 在启动时生成生产提示"
  },
  "使用Vue.extend()创建全局vue组件": {
    "prefix": "Vue-Api-Extend",
    "body": [
      "let Profile = Vue.extend({",
      "\ttemplate:'<p>{{dad}} {{mom}} 生了 {{me}}</p>',",
      "\tdata: function () {",
      "\t\treturn {",
      "\t\t\tdad: '爸爸',",
      "\t\t\tdad: '妈妈',",
      "\t\t\tdad: '我'",
      "\t\t}",
      "\t}",
      "})"
    ],
    "description": "基础 Vue 构造器，创建一个“子类”"
  },
  "在下次 DOM 更新循环结束之后执行延迟回调": {
    "prefix": "Vue-Api-NextTick",
    "body": ["Vue.nextTick({", "\t$1", "})"],
    "description": [
      "在下次 DOM 更新循环结束之后执行延迟回调",
      "在修改数据之后立即使用这个方法，获取更新后的 DOM"
    ]
  },
  "在下次 DOM 更新循环结束之后执行延迟回调(v2.1.0+)": {
    "prefix": "Vue-Api-NextTick-Then",
    "body": ["Vue.nextTick({", "\t$1", "}).then(function ($2) {", "\t$3", "})"],
    "description": "在下次 DOM 更新循环结束之后执行延迟回调(v2.1.0+)"
  },
  "向响应式对象中添加一个属性，且触发视图更新": {
    "prefix": "Vue-Api-Set",
    "body": [
      "Vue.set(${1:target(Object|Array)}, ${2:key(string|number)}, ${3:value})"
    ],
    "description": [
      "向响应式对象中添加一个属性，新属性同样是响应式，且触发视图更新",
      "对象不能是 Vue 实例，或者 Vue 实例的根数据对象。"
    ]
  },
  "删除对象的属性": {
    "prefix": "Vue-Api-Delete",
    "body": ["Vue.delete(${1:target(Object|Array)}, ${2:key(string|number)})"],
    "description": "删除对象的属性"
  },
  "vue自定义指令(全局)": {
    "prefix": "Vue-Api-Directive",
    "body": [
      "Vue.directive('${1:指令名称(不加v-)}',{",
      "\t${2|bind: function (el) { /*用于样式相关操作(只执行一次)*/ },inserted: function (el) { /*用于行为相关操作*/ },updated: function (el) { /*当VNode更新的时候执行[可能会触发多次]*/ },unbind: function(el){ /*与元素解绑时[执行一次]*/ },componentUpdated: function(el){ /*当所有VNode及VNode孩子全部更新的时候执行*/ }|}",
      "})"
    ],
    "description": "vue自定义指令(全局)"
  },
  "inserted: function(){}": {
    "prefix": ["vue-api-directive-inserted"],
    "body": [
      "inserted: function(el,binding){",
      "\t//el:指令绑定的元素",
      "\t//binding.name指令名\tbinding.value绑定值\tbingding.expression绑定至(字符串形式)",
      "\t$0",
      "}"
    ],
    "description": ["vue自定义指令中的钩子函数", "一般用于行为相关操作"]
  },
  "bind: function(){}": {
    "prefix": ["vue-api-directive-bind"],
    "body": [
      "bind: function(el,binding){",
      "\t//el:指令绑定的元素",
      "\t//binding.name指令名\tbinding.value绑定值\tbingding.expression绑定至(字符串形式)",
      "\t$0",
      "}"
    ],
    "description": ["vue自定义指令中的钩子函数", "一般用于样式相关操作"]
  },
  "updated: function(){}": {
    "prefix": ["vue-api-directive-updated"],
    "body": [
      "updated: function(el,binding){",
      "\t//el:指令绑定的元素",
      "\t//binding.name指令名\tbinding.value绑定值\tbingding.expression绑定至(字符串形式)",
      "\t$0",
      "}"
    ],
    "description": ["vue自定义指令中的钩子函数", "当VNode更新的时候执行"]
  },
  "componentUpdated: function(){}": {
    "prefix": ["vue-api-directive-componentUpdated"],
    "body": [
      "componentUpdated: function(el,binding){",
      "\t//el:指令绑定的元素",
      "\t//binding.name指令名\tbinding.value绑定值\tbingding.expression绑定至(字符串形式)",
      "\t$0",
      "}"
    ],
    "description": [
      "vue自定义指令中的钩子函数",
      "当所有VNode及VNode孩子全部更新的时候执行"
    ]
  },
  "unbind: function(){}": {
    "prefix": ["vue-api-directive-unbind"],
    "body": [
      "unbind: function(el,binding){",
      "\t//el:指令绑定的元素",
      "\t//binding.name指令名\tbinding.value绑定值\tbingding.expression绑定至(字符串形式)",
      "\t$0",
      "}"
    ],
    "description": ["vue自定义指令中的钩子函数", "与元素解绑时调用只一次"]
  },
  "注册过滤器(全局)": {
    "prefix": "Vue-Api-Filter",
    "body": [
      "// 调用  {{ msg | ${1:过滤器名字}() }}",
      "Vue.filter('${1:过滤器名字}', (${2:管道前的值(msg的值)}, ${3:过滤器传入的参数}) => {",
      "\t${0:代码}",
      "}"
    ],
    "description": "注册过滤器(全局)"
  },
  "vue简易时间格式化(全局)": {
    "prefix": ["vue-api-filter-time"],
    "body": [
      "//{{ date | dateFormat('yyyy-mm-dd') }} 不填默认 yyyy-mm-dd hh-mm-ss",
      "// 过滤器， 进行时间的格式化",
      "Vue.filter('dateFormat', function (dateStr, pattern = '') {",
      "\tlet dt = new Date(dateStr)",
      "\tlet y = dt.getFullYear()",
      "\tlet m = (dt.getMonth() + 1).toString().padStart(2, '0')",
      "\tlet d = dt.getDate().toString().padStart(2, '0')",
      "\tpattern.toLowerCase() //传入参数转成小写",
      "\tif (pattern.toLowerCase() === 'yyyy-mm-dd') {",
      "\t\treturn `${${y}}-${${m}}-${${d}}`",
      "\t} else {",
      "\t\tlet hh = dt.getHours().toString().padStart(2, '0')",
      "\t\tlet mm = dt.getMinutes().toString().padStart(2, '0')",
      "\t\tlet ss = dt.getSeconds().toString().padStart(2, '0')",
      "\t\treturn `${${y}}-${${m}}-${${d}} ${${hh}}:${${mm}}:${${ss}}`",
      "\t}",
      "})"
    ],
    "description": ["vue简易时间格式化(全局)"]
  },
  "注册全局组件(引用外部template)": {
    "prefix": "Vue-Api-Component-Registered",
    "body": [
      "Vue.component('${1:组件名称}', {props: [],template: '#${2:外部template模板id}'}})"
    ],
    "description": "注册全局组件(引用外部template)"
  },
  "注册全局组件(内部template)": {
    "prefix": "Vue-Api-Component-Registered",
    "body": [
      "Vue.component('${1:组件名称}', ${2|创建出来的组件模板对象(有且只有一个根标签),({template:'<p>你好!</p>'})|})"
    ],
    "description": "注册全局组件(内部template)"
  },
  "安装vue.js插件": {
    "prefix": "Vue-Api-Use",
    "body": ["Vue.use(${1:plugin}) //需要在调用 new Vue() 之前被调用 $0"],
    "description": ["安装vue.js插件", "new Vue()"]
  },
  "全局混入": {
    "prefix": "VueMixin",
    "body": ["Vue.mixin({${1:mixin}})"],
    "description": "全局混入"
  },
  "模板编译": {
    "prefix": "Vue-Api-Compile",
    "body": ["Vue.compile(${1:template})"],
    "description": "模板编译"
  },
  "让一个对象可响应": {
    "prefix": ["Vue-Api-Observable"],
    "body": ["vue.observable({${1:object}})"],
    "description": ["让一个对象可响应"]
  },
  "返回字符串形式的 Vue 安装版本号": {
    "prefix": "Vue-Api-Version",
    "body": ["Vue.version$0"],
    "description": "提供字符串形式的 Vue 安装版本号"
  },
  "Vue实例的数据对象": {
    "prefix": "data",
    "body": ["data() {", "\treturn {", "\t\t$1", "\t}", "},$0"],
    "description": "Vue(组件中)实例数据对象"
  },
  "接收来自父组件的数据(只读)": {
    "prefix": "props",
    "body": ["props: ['${0:父组件传递的自定义属性名(str)}'],"],
    "description": "接收来自父组件的数据(只读)"
  },
  "创建实例时传递 props 主要作用是方便测试。": {
    "prefix": "propsData",
    "body": ["propsData: { ${1:key(string)}: value}"],
    "description": [
      "创建实例时传递 props 主要作用是方便测试",
      "限制：只用于 new 创建的实例中"
    ]
  },
  "default": {
    "prefix": ["default"],
    "body": ["default"],
    "description": ["just a word", "default默认"]
  },
  "scopedSlots": {
    "prefix": "scopedSlots",
    "body": ["scopedSlots"],
    "description": "just a word"
  },
  "计算属性(用于计算总价,总数)": {
    "prefix": "computed",
    "body": [
        "computed: {", 
        "\t// 直接当做普通属性调用不加括号",
        "\t// 任何data中数据变化立即重新计算",
        "\t// 计算属性会缓存",
        "\t$1", 
        "\treturn ${2:必须retrun结果}", 
        "},$0"],
    "description": "计算属性(用于计算总价,总数)"
  },
  "Vue实例中的方法": {
    "prefix": "methods",
    "body": ["methods: {", "\t$1", "},$0"],
    "description": "Vue实例中的方法"
  },
  "侦听器(用于监听非DOM事件)": {
    "prefix": "watch",
    "body": [
      "watch: {",
      "\t${1|要观察的对象(一般为非DOM事件),'$route.path'|}:function(newVal, oldVal){",
      "\t",
      "\t}",
      "},$0"
    ],
    "description": ["侦听器(用于监听非DOM事件)", "不能使用箭头函数来定义"]
  },
  "watchWithOptions": {
    "prefix": "watchWithOptions",
    "body": [
      "${1:key}: {",
      "\tdeep: ${2:true},",
      "\timmediate: ${3:true},",
      "\thandler: function (${4:val}, ${5:oldVal}) {",
      "\t\t$6",
      "\t}",
      "},$0"
    ],
    "description": "Vue Watcher with options."
  },
  "el": {
    "prefix": "el",
    "body": ["el"],
    "description": "just a word"
  },
  "template": {
    "prefix": "template",
    "body": ["template"],
    "description": "just a word"
  },
  "render": {
    "prefix": "render",
    "body": ["render(h) {", "\t$1", "},"],
    "description": "An alternative to string templates allowing you to leverage the full programmatic power of JavaScript."
  },
  "renderError": {
    "prefix": "renderError",
    "body": ["renderError(h, err) {", "\t$1", "},"],
    "description": "Provide an alternative render output when the default render function encounters an error."
  },
  "(vue创建阶段的第一个生命周期函数)实例未完全创建出来执行的生命周期函数": {
    "prefix": "vue-life-1beforeCreate",
    "body": ["beforeCreate() {  //实例未完全创建出来执行 ", "\t$1", "},"],
    "description": ["实例创建之前", "实例未完全创建出来执行"]
  },
  "(vue创建阶段的第二个生命周期函数)实例创建出来才执行的生命周期函数": {
    "prefix": "vue-life-2created",
    "body": [
      "created() {  //methods和data已经初始化,常用于操作数据，发起ajax请求",
      "\t$1",
      "},"
    ],
    "description": [
      "已经创建初始化数据",
      "常用于操作数据，发起ajax请求",
      "调用methods方法或者调用data数据，最早能在created执行"
    ]
  },
  "(vue创建阶段的第三个生命周期函数)模板已在内存编译但尚未渲染": {
    "prefix": "vue-life-3beforeMount",
    "body": ["beforeMount() { //挂载数据之前", "\t$1", "},"],
    "description": ["挂载数据之前", "模板已在内存编译但尚未渲染"]
  },
  "(vue创建阶段的第四个生命周期函数)模板已渲染到浏览器": {
    "prefix": "vue-life-4mounted",
    "body": ["mounted() { //内存中的模板已挂载到页面中", "\t$1", "},"],
    "description": [
      "内存中的模板已挂载到页面中",
      "操作dom节点最早在mounted进行"
    ]
  },
  "(vue运行阶段的第一个生命周期函数)页面尚未和最新数据保持一致": {
    "prefix": "vue-life-5beforeUpdate",
    "body": ["beforeUpdate() { //数据更新之前", "\t$1", "},"],
    "description": ["数据更新之前", "页面尚未和最新数据保持一致"]
  },
  "(vue运行阶段的第二个生命周期函数)页面数据已和最新数据同步为最新": {
    "prefix": "vue-life-6updated",
    "body": ["updated() { //页面数据已更新", "\t$1", "},"],
    "description": ["页面数据已更新"]
  },
  "activated": {
    "prefix": "vue-life-activated",
    "body": ["activated() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "deactivated": {
    "prefix": "vue-life-deactivated",
    "body": ["deactivated() {", "\t$1", "},"],
    "description": "Type: Function."
  },
  "(vue销毁阶段第一个生命周期函数)还未真正执行销毁过程": {
    "prefix": "vue-life-7beforeDestroy",
    "body": ["beforeDestroy() { //vue销毁之前", "\t$1", "},"],
    "description": ["vue销毁之前"]
  },
  "(vue销毁阶段第二个生命周期函数)已完全销毁": {
    "prefix": "vue-life-8destroyed",
    "body": ["destroyed() {  //已完全销毁", "\t$1", "},"],
    "description": ["已完全销毁"]
  },
  "errorCaptured": {
    "prefix": "errorCaptured",
    "body": ["errorCaptured: (err, vm, info) => {", "\t$1", "},"],
    "description": "Type: (err: Error, vm: Component, info: string) => ?boolean"
  },
  "vue定义私有指令(写在vue实例中)": {
    "prefix": "directives",
    "body": ["directives"],
    "description": "vue定义私有指令(写在vue实例中)"
  },
  "vue私有过滤器(写在vue实例中)": {
    "prefix": "filters",
    "body": ["filters: {}"],
    "description": "vue私有过滤器(写在vue实例中)"
  },
  "componentWord": {
    "prefix": "component",
    "body": ["component"],
    "description": "just a word"
  },
  "components": {
    "prefix": "components",
    "body": ["components"],
    "description": ["just a word", "注册私有组件"]
  },
  "parent": {
    "prefix": "parent",
    "body": ["parent"],
    "description": "just a word"
  },
  "mixins": {
    "prefix": "mixins",
    "body": ["mixins"],
    "description": "just a word"
  },
  "extends": {
    "prefix": "extends",
    "body": ["extends"],
    "description": "just a word"
  },
  "provide": {
    "prefix": "provide",
    "body": ["provide"],
    "description": "just a word"
  },
  "inject": {
    "prefix": "inject",
    "body": ["inject"],
    "description": "just a word"
  },
  "name": {
    "prefix": "name",
    "body": ["name"],
    "description": "just a word"
  },
  "delimiters": {
    "prefix": "delimiters",
    "body": ["delimiters"],
    "description": "just a word"
  },
  "functional": {
    "prefix": "functional",
    "body": ["functional"],
    "description": "just a word"
  },
  "model": {
    "prefix": "model",
    "body": ["model"],
    "description": "just a word"
  },
  "inheritAttrs": {
    "prefix": "inheritAttrs",
    "body": ["inheritAttrs"],
    "description": "just a word"
  },
  "comments": {
    "prefix": "comments",
    "body": ["comments"],
    "description": "just a word"
  },
  "deep": {
    "prefix": "deep",
    "body": ["deep"],
    "description": "just a word"
  },
  "immediate": {
    "prefix": "immediate",
    "body": ["immediate"],
    "description": "just a word"
  },
  "vm.$data": {
    "prefix": ["vmData", "this-Data"],
    "body": ["${1|this,vm|}.\\$data$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$props": {
    "prefix": ["vmProps", "this-props"],
    "body": ["${1|this,vm|}.\\$props$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$el": {
    "prefix": ["vmEl", "this-el"],
    "body": ["${1|this,vm|}.\\$el$2"],
    "description": "Type: HTMLElement. Read only."
  },
  "vm.$options": {
    "prefix": ["vmOptions", "this-options"],
    "body": ["${1|this,vm|}.\\$options$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$parent": {
    "prefix": ["vmParent", "this-parent"],
    "body": ["${1|this,vm|}.\\$parent$2"],
    "description": "Type: Vue instance. Read only."
  },
  "vm.$root": {
    "prefix": ["vmRoot", "this-root"],
    "body": ["${1|this,vm|}.\\$root$2"],
    "description": "Type: Vue instance. Read only."
  },
  "vm.$route": {
    "prefix": ["vm-Route", "this-route"],
    "body": ["${1|this,vm|}.\\$route$2"],
    "description": "获取路由属性"
  },
  "vm.$route-query": {
    "prefix": ["vm-Route-Query", "this-route-query"],
    "body": ["${1|this,vm|}.\\$route.query"],
    "description": "获取路由属性 ?id=1"
  },
  "vm.$route-params": {
    "prefix": ["vm-Route-params", "this-route-params"],
    "body": ["${1|this,vm|}.\\$route.params"],
    "description": "获取路由属性"
  },
  "vm.$children": {
    "prefix": ["vmChildren", "vm-children"],
    "body": ["${1|this,vm|}.\\$children$2"],
    "description": "Type: Array<Vue instance>. Read only."
  },
  "vm.$slots": {
    "prefix": ["vmSlots", "vm-slots"],
    "body": ["${1|this,vm|}.\\$slots$2"],
    "description": "Type: Object. Read only."
  },
  "vm.$scopedSlots": {
    "prefix": ["vmScopedSlots", "vm-scopedSlots"],
    "body": ["${1|this,vm|}.\\$scopedSlots.default({", "\t$2", "})"],
    "description": "Type: { [name: string]: props => VNode | Array<VNode> }. Read only."
  },
  "vm.$refs": {
    "prefix": ["vmRefs", "this-refs"],
    "body": ["${1|this,vm|}.\\$refs.${0:需要获取的dom元素(标签中ref的值)}"],
    "description": "Type: Object. Read only."
  },
  "vm.$isServer": {
    "prefix": ["vmIsServer", "this-isServer"],
    "body": ["${1|this,vm|}.\\$isServer$2"],
    "description": "Type: boolean. Read only."
  },
  "vm.$attrs": {
    "prefix": ["vmAttrs", "this-attrs"],
    "body": ["${1|this,vm|}.\\$attrs$2"],
    "description": "Type: { [key: string]: string }. Read only."
  },
  "vm.$listeners": {
    "prefix": ["vmListeners", "this-listeners"],
    "body": ["${1|this,vm|}.\\$listeners$2"],
    "description": "Type: { [key: string]: Function | Array<Function> }. Read only."
  },
  "vm.$watch": {
    "prefix": ["vmWatch", "this-watch"],
    "body": [
      "${1|this,vm|}.\\$watch(${2:expOrFn}, ${3:callback}${4:, [options]})"
    ],
    "description": "vm.$watch( expOrFn, callback, [options] )\n Arguments:\n {string | Function} expOrFn\n {Function | Object} callback\n {Object} [options]\n {boolean} [options.deep]\n\t {boolean} [options.immediate]"
  },
  "vm.$set": {
    "prefix": ["vmSet", "this.set"],
    "body": ["${1|this,vm|}.\\$set(${2:target}, ${3:key}, ${4:value})"],
    "description": "vm.$set( target, key, value ). This is the alias of the global Vue.set."
  },
  "vm.$delete": {
    "prefix": ["vmDelete", "this-delete"],
    "body": [
      "${1|this,vm|}.\\$delete(${2:target}, ${3:key}). This is the alias of the global Vue.delete."
    ],
    "description": "vm.$delete( target, key )"
  },
  "vm.$on": {
    "prefix": ["vmOn", "this-on"],
    "body": ["${1|this,vm|}.\\$on('${2:event}', ${3:callback})$4"],
    "description": "监听事件中心事件"
  },
  "vm.$once": {
    "prefix": ["vmOnce", "this-once"],
    "body": ["${1|this,vm|}.\\$once('${2:event}', ${3:callback})$4"],
    "description": "vm.$once( event, callback )"
  },
  "vm.$off": {
    "prefix": ["vmOff", "this-off"],
    "body": ["${1|this,vm|}.\\$off('${2:event}', ${3:callback})$4"],
    "description": "销毁事件中心事件"
  },
  "vm.$emit调用触发父组件的方法(可用于子=>父传参)": {
    "prefix": ["vmEmit-params", "this-emit-params"],
    "body": ["${1|this,vm|}.\\$emit('${2:自定义事件}'${3:, [要传递的参数]})$4"],
    "description": [
      "调用触发父组件的方法(可用于子=>父传参)",
      "通过子组件绑定自定义事件的方式调用父"
    ]
  },
  "vm.$mount": {
    "prefix": ["vmMount", "this-mount"],
    "body": ["${1|this,vm|}.\\$mount('$2')"],
    "description": "vm.$mount( [elementOrSelector] )"
  },
  "vm.$forceUpdate": {
    "prefix": ["vmForceUpdate", "this-forceUpdate"],
    "body": ["${1|this,vm|}.\\$forceUpdate()"],
    "description": "vm.$forceUpdate()"
  },
  "vm.$nextTick": {
    "prefix": ["vmNextTick", "this-nextTick"],
    "body": ["${1|this,vm|}.\\$nextTick(${2:callback})"],
    "description": "vm.$nextTick( callback )"
  },
  "vm.$destroy": {
    "prefix": ["vmDestroy", "this-destroy"],
    "body": ["${1|this,vm|}.\\$destroy()$2"],
    "description": "vm.$destroy()"
  },
  "renderer": {
    "prefix": "renderer",
    "body": [
      "const ${1:renderer} = require('vue-server-renderer').createRenderer()$0"
    ],
    "description": "require('vue-server-renderer').createRenderer()"
  },
  "createRenderer": {
    "prefix": "createRenderer",
    "body": ["createRenderer({", "\t$1", "})"],
    "description": "createRenderer({ })"
  },
  "renderToString": {
    "prefix": "renderToString",
    "body": ["renderToString"],
    "description": "just a word"
  },
  "renderToStream": {
    "prefix": "renderToStream",
    "body": ["renderToStream"],
    "description": "just a word"
  },
  "createBundleRenderer": {
    "prefix": "createBundleRenderer",
    "body": ["createBundleRenderer"],
    "description": "just a word"
  },
  "bundleRenderer.renderToString": {
    "prefix": "bundleRenderer.renderToString",
    "body": ["bundleRenderer.renderToString"],
    "description": "just a word"
  },
  "bundleRenderer.renderToStream": {
    "prefix": "bundleRenderer.renderToStream",
    "body": ["bundleRenderer.renderToStream"],
    "description": "just a word"
  },
  "preventDefault": {
    "prefix": "preventDefault",
    "body": ["preventDefault();", "$1"],
    "description": "preventDefault()"
  },
  "stopPropagation": {
    "prefix": "stopPropagation",
    "body": ["stopPropagation();", "$1"],
    "description": "stopPropagation()"
  },
  "newVueRouter": {
    "prefix": "new-VueRouter",
    "body": ["const ${1:router} = new VueRouter({", "\t$2", "})$0"],
    "description": "const router = newVueRouter({ })"
  },
  "newVueRouter-temp": {
    "prefix": "new-VueRouter-temp",
    "body": [
      "const ${1:router} = new VueRouter({",
      "\troutes:[ //路由匹配规则",
      "\t\t{ path: '${2:/}', redirect: '${3:/login}'}, //redirect重定向",
      "\t\t{ path: '${4:/login}', component: ${5:loginCom}},",
      "\t\t{ path: '${6:/register}', component: ${7:registerCom},",
      "\t\t\tchildren: [{ path: 'abc', component: abcCom }]",
      "\t\t}",
      "\t],",
      "\tlinkActiveClass: '${8:自定义选中router-link时高亮类名}'",
      "})$0",
      "//必须将创建好的router路由 ${1:router} 注册到 new Vue()中"
    ],
    "description": "const router = newVueRouter({ })"
  },
  "routerBeforeEach": {
    "prefix": "routerBeforeEach",
    "body": [
      "${1:router}.beforeEach((to, from, next) => {",
      "\t${2:// to and from are both route objects. must call `next`.}",
      "})$0"
    ],
    "description": "router.beforeEach"
  },
  "routerBeforeResolve": {
    "prefix": "routerBeforeResolve",
    "body": [
      "${1:router}.beforeResolve((to, from, next) => {",
      "\t${2:// to and from are both route objects. must call `next`.}",
      "})$0"
    ],
    "description": "router.beforeResolve"
  },
  "routerAfterEach": {
    "prefix": "routerAfterEach",
    "body": [
      "${1:router}.afterEach((to, from) => {",
      "\t${2:// to and from are both route objects.}",
      "})$0"
    ],
    "description": "router.afterEach"
  },
  "routerPush": {
    "prefix": "routerPush",
    "body": ["${1:router}.push($2)$0"],
    "description": "router.push()"
  },
  "routerReplace": {
    "prefix": "routerReplace",
    "body": ["${1:router}.replace($2)$0"],
    "description": "router.replace()"
  },
  "routerGo": {
    "prefix": "routerGo",
    "body": ["${1:router}.go($2)$0"],
    "description": "router.go()"
  },
  "routerBack": {
    "prefix": "routerBack",
    "body": ["${1:router}.back($2)$0"],
    "description": "router.back()"
  },
  "routerForward": {
    "prefix": "routerForward",
    "body": ["${1:router}.forward($2)$0"],
    "description": "router.forward()"
  },
  "routerGetMatchedComponents": {
    "prefix": "routerGetMatchedComponents",
    "body": ["${1:router}.getMatchedComponents($2)$0"],
    "description": "router.getMatchedComponents()"
  },
  "routerResolve": {
    "prefix": "routerResolve",
    "body": ["${1:router}.resolve($2)$0"],
    "description": "router.resolve()"
  },
  "routerAddRoutes": {
    "prefix": "routerAddRoutes",
    "body": ["${1:router}.addRoutes($2)$0"],
    "description": "router.addRoutes()"
  },
  "routerOnReady": {
    "prefix": "routerOnReady",
    "body": ["${1:router}.onReady($2)$0"],
    "description": "router.onReady()"
  },
  "routerOnError": {
    "prefix": "routerOnError",
    "body": ["${1:router}.onError($2)$0"],
    "description": "router.onError()"
  },
  "routes": {
    "prefix": "routes",
    "body": ["routes: [$0]"],
    "description": "路由匹配规则routes: []"
  },
  "routes-temp": {
    "prefix": "routes-temp",
    "body": [
      "routes: [",
      "\t{ path: '${1:/}', redirect: ${2:/login}} //redirect重定向",
      "\t{ path: '${3:/login}', component: ${4:loginCom}}",
      "\t{ path: '${5:/register}', component: ${2:registerCom}}",
      "]$0"
    ],
    "description": "路由匹配规则routes: []"
  },
  "routes-temp-namedView": {
    "prefix": "routes-temp-namedView",
    "body": [
      "//<router-view name=''>添加相应name属性",
      "routes: [",
      "\t{ path: '${1:/}', components: {",
      "\t  'default': header,",
      "\t  'left': leftBox,",
      "\t  'main': mainBox,",
      "\t}}",
      "]$0"
    ],
    "description": ["路由命名视图","<router-view name=''>添加相应name属性"]
  },
  "beforeEnter": {
    "prefix": "beforeEnter",
    "body": ["beforeEnter: (to, from, next) => {", "\t${1:// ...}", "}"],
    "description": "beforeEnter: (to, from, next) => { }"
  },
  "beforeRouteEnter": {
    "prefix": "beforeRouteEnter",
    "body": ["beforeRouteEnter (to, from, next) {", "\t${1:// ...}", "}"],
    "description": "beforeRouteEnter (to, from, next) { }"
  },
  "beforeRouteLeave": {
    "prefix": "beforeRouteLeave",
    "body": ["beforeRouteLeave (to, from, next) {", "\t${1:// ...}", "}"],
    "description": "beforeRouteLeave (to, from, next) { }"
  },
  "scrollBehavior": {
    "prefix": "scrollBehavior",
    "body": [
      "scrollBehavior (to, from, savedPosition) {",
      "\t${1:// ...}",
      "}"
    ],
    "description": "scrollBehavior (to, from, savedPosition) { }"
  },
  "path": {
    "prefix": "path",
    "body": ["path"],
    "description": "just a word"
  },
  "alias": {
    "prefix": "alias",
    "body": ["alias"],
    "description": "just a word"
  },
  "mode": {
    "prefix": "mode",
    "body": ["mode"],
    "description": "just a word"
  },
  "children": {
    "prefix": "children",
    "body": ["children"],
    "description": [
      "just a word",
      "vueRouter路由嵌套children:[path:'aa',component:aaCom]"
    ]
  },
  "meta": {
    "prefix": "meta",
    "body": ["meta"],
    "description": "just a word"
  },
  "newVuexStore": {
    "prefix": "newVuexStore",
    "body": ["const ${1:store} = new Vuex.Store({", "\t${2:// ...}", "})"],
    "description": "const store = new Vuex.Store({ })"
  },
  "state": {
    "prefix": "state",
    "body": ["state"],
    "description": "just a word"
  },
  "getters": {
    "prefix": "getters",
    "body": ["getters"],
    "description": "just a word"
  },
  "mutations": {
    "prefix": "mutations",
    "body": ["mutations"],
    "description": "just a word"
  },
  "actions": {
    "prefix": "actions",
    "body": ["actions"],
    "description": "just a word"
  },
  "modules": {
    "prefix": "modules",
    "body": ["modules"],
    "description": "just a word"
  },
  "plugins": {
    "prefix": "plugins",
    "body": ["plugins"],
    "description": "just a word"
  },
  "commit": {
    "prefix": "commit",
    "body": ["commit"],
    "description": "just a word"
  },
  "dispatch": {
    "prefix": "dispatch",
    "body": ["dispatch"],
    "description": "just a word"
  },
  "replaceState": {
    "prefix": "replaceState",
    "body": ["replaceState"],
    "description": "just a word"
  },
  "subscribe": {
    "prefix": "subscribe",
    "body": ["subscribe"],
    "description": "just a word"
  },
  "registerModule": {
    "prefix": "registerModule",
    "body": ["registerModule"],
    "description": "just a word"
  },
  "unregisterModule": {
    "prefix": "unregisterModule",
    "body": ["unregisterModule"],
    "description": "just a word"
  },
  "hotUpdate": {
    "prefix": "hotUpdate",
    "body": ["hotUpdate"],
    "description": "just a word"
  },
  "mapState": {
    "prefix": "mapState",
    "body": ["mapState"],
    "description": "just a word"
  },
  "mapGetters": {
    "prefix": "mapGetters",
    "body": ["mapGetters"],
    "description": "just a word"
  },
  "mapActions": {
    "prefix": "mapActions",
    "body": ["mapActions"],
    "description": "just a word"
  },
  "mapMutations": {
    "prefix": "mapMutations",
    "body": ["mapMutations"],
    "description": "just a word"
  },
  "asyncData": {
    "prefix": "asyncData",
    "body": [
      "asyncData({${1:isDev}${2:, route}${3:, store}${4:, env}${5:, params}${6:, query}${7:, req}${8:, res}${9:, redirect}${10:, error}}) {",
      "\t$11",
      "},"
    ],
    "description": "Type: Function."
  },
  "vue-resource发送ajax(GET)[全局]": {
    "prefix": ["vue-resource-get"],
    "body": [
      "// $ npm install vue-resource",
      "// GET /someUrl?foo=bar",
      "Vue.http.get('${1:/someUrl}'${2:,{params: {foo: 'bar'}}}).then( response =>{",
      "\t// success callback",
      "\tconsole.log(response.body)",
      "},  response => {",
      "\t// error callback",
      "});"
    ],
    "description": ["vue-resource发送ajax(GET)[全局]"]
  },
  "vue-resource发送ajax(GET)[私有]": {
    "prefix": ["vue-resource-get"],
    "body": [
      "// $ npm install vue-resource",
      "this.$$http.get('${1:/getInfo}'${2:,{params: {foo: 'bar'}}}).then( response => {",
      "\t// success callback",
      "\tconsole.log(response.body)",
      "}, response => {",
      "\t// error callback",
      "})"
    ],
    "description": ["vue-resource发送ajax(GET-params)[私有]"]
  },
  "vue-resource发送ajax(POST)[私有]": {
    "prefix": ["vue-resource-post"],
    "body": [
      "// $ npm install vue-resource",
      "this.$$http.post('${1:/post}', {${2:参数}}, { emulateJSON: true }).then( response => {",
      "\t//success callback",
      "\tconsole.log( response.body )",
      "}, response => {",
      "\t//error callback",
      "})"
    ],
    "description": ["vue-resource发送ajax(POST)[私有]"]
  },
  "vue-resource发送ajax(POST)[全局]": {
    "prefix": ["vue-resource-post"],
    "body": [
      "// $ npm install vue-resource",
      "Vue.http.post('${1:/someUrl}'${2:,{params: {foo: 'bar'}}}, { emulateJSON: true }).then( response =>{",
      "\t// success callback",
      "\tconsole.log(response.body)",
      "},  response => {",
      "\t// error callback",
      "});"
    ],
    "description": ["vue-resource发送ajax(POST)[全局]"]
  },
  "vue-resource发送ajax(JSONP)[私有]": {
    "prefix": ["vue-resource-jsonp"],
    "body": [
      "// $ npm install vue-resource",
      "this.$$http.jsonp('${1:/jsonp}'${2:,{params: {foo: 'bar'}}}).then( response => {",
      "\t// success callback",
      "\tconsole.log(response.body)",
      "}, response => {",
      "\t// error callback",
      "})"
    ],
    "description": ["vue-resource发送ajax(JSONP)[私有]"]
  },
  "vue-resource全局配置": {
    "prefix": ["vue-resource-config"],
    "body": [
      "// 设置全局根路径,单独发送请求时不能带 / 例：this.$http.get('getprodlist').then((res)=>{})",
      "Vue.http.options.root = 'http://vue.studyit.io/';",
      "// 全局启用 emulateJSON 选项",
      "Vue.http.options.emulateJSON = true;"
    ],
    "description": ["vue-resource全局配置"]
  }
}
