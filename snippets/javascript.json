{
  "计算两个日期之间的工作日(可自定义调休假期)": {
      "prefix": ["hs-computed"],
      "body": [
        "//  假日",
        "let Holiday = ['2020-01-01','2020-01-24', '2020-01-25', '2020-01-26', '2020-01-27', '2020-01-28', '2020-01-29', '2020-01-30', '2020-04-04', '2020-04-05', ",       "'2020-04-06', '2020-05-01', '2020-05-02', '2020-05-03', '2020-06-25', '2020-06-26', '2020-06-27', '2020-10-01', '2020-10-02', '2020-10-03', '2020-10-04', ",   "'2020-10-05', '2020-10-06', '2020-10-07']",
        "// 调休加班补班",
        "let WeekendsOff = []",
        "/**",
        " * 计算当前时间（或指定时间），向前推算周数(weekcount)，得到结果周的第一天的时期值；",
        " * @param {String} mode 推算模式（'cn'表示国人习惯【周一至周日】；'en'表示国际习惯【周日至周一】）",
        " * @param {Number} weekcount 表示周数（0-表示本周， 1-前一周，2-前两周，以此推算）；",
        " * @param {String} end 指定时间的字符串（未指定则取当前时间）",
        " */",
        "function nearlyWeeks(mode = 'cn', weekcount = 0, end = new Date()) {",
        "    end = new Date(new Date(end).toDateString())",
        "    let days = 0",
        "    if (mode === 'cn') //中国时间模式",
        "        days = (new Date(end).getDay() == 0 ? 7 : new Date(end).getDay()) - 1",
        "    else //歪果仁时间模式",
        "        days = new Date(end).getDay()",
        "    return new Date(new Date(end).getTime() - (days + weekcount * 7) * 24 * 60 * 60 * 1000)",
        "}",
        "/**",
        " * 计算一段时间内工作的天数。不包括周末和法定节假日，法定调休日为工作日，周末为周六、周日两天",
        " * @param {String} beginDay 时间段开始日期",
        " * @param {String} endDay 时间段结束日期",
        " * @param {String} mode 推算模式（'cn'表示国人习惯【周一至周日】；'en'表示国际习惯【周日至周一】）",
        " */",
        "function getWorkDayCount(beginDay, endDay, mode = 'cn') {",
        "    let begin = new Date(new Date(beginDay).toDateString())",
        "    let end = new Date(new Date(endDay).toDateString())",
        "    //每天的毫秒总数，用于以下换算",
        "    const daytime = 24 * 60 * 60 * 1000;",
        "    //两个时间段相隔的总天数",
        "    const days = (end - begin) / daytime + 1;",
        "    //时间段起始时间所在周的第一天",
        "    const beginWeekFirstDay = nearlyWeeks(mode, 0, new Date(beginDay).getTime()).getTime();",
        "    //时间段结束时间所在周的最后天",
        "    const endWeekOverDay = nearlyWeeks(mode, 0, new Date(endDay).getTime()).getTime() + 6 * daytime;",
        "    //由beginWeekFirstDay和endWeekOverDay换算出，周末的天数",
        "    let weekEndCount = ((endWeekOverDay - beginWeekFirstDay) / daytime + 1) / 7 * 2;",
        "    //根据参数mode，调整周末天数的值",
        "    if (mode == 'cn') { //中国",
        "        //周一到周五  结束",
        "        if (new Date(endDay).getDay() > 0 && new Date(endDay).getDay() < 6)  weekEndCount -= 2",
        "        //周6  结束",
        "        if (new Date(endDay).getDay() == 6) weekEndCount -= 1",
        "        //周日  开始",
        "        if (new Date(beginDay).getDay() == 0) weekEndCount -= 1 ",
        "    } else { //歪果仁",
        "        if (new Date(beginDay).getDay() < 6) weekEndCount -= 1;",
        "        if (new Date(beginDay).getDay() > 0) weekEndCount -= 1;",
        "    }",
        "    //根据调休设置，调整周末天数（排除调休日）",
        "    WeekendsOff.forEach(offitem => {",
        "        let itemDay = new Date(offitem.split('-')[0] + '/' + offitem.split('-')[1] + '/' + offitem.split('-')[2])",
        "        //如果调休日在时间段区间内，且为周末时间（周六或周日），周末天数值-1",
        "        if (itemDay.getTime() >= begin.getTime() && itemDay.getTime() <= end.getTime() && (itemDay.getDay() == 0 || itemDay.getDay() == 6)) weekEndCount -= 1",
        "    })",
        "    //根据法定假日设置，计算时间段内周末的天数（包含法定假日）",
        "    Holiday.forEach(itemHoliday => {",
        "        let itemDay = new Date(itemHoliday.split('-')[0] + '/' + itemHoliday.split('-')[1] + '/' + itemHoliday.split('-')[2])",
        "        //如果法定假日在时间段区间内，且为工作日时间（周一至周五），周末天数值+1",
        "        if (itemDay.getTime() >= begin.getTime() && itemDay.getTime() <= end.getTime() && itemDay.getDay() > 0 && itemDay.getDay() < 6) weekEndCount += 1",
        "    })",
        "    //工作日 = 总天数 - 周末天数（包含法定假日并排除调休日）",
        "    return parseInt(days - weekEndCount)",
        "};",
        "/**",
        " * 计算工期结束日期",
        " * @param {Number} howLong 工期多少天",
        " * @param {Boolean} mode 周末是否加班[默认false,周末不算工期]",
        " * @param {String} beginDay 开始日期",
        " */",
        "function getEndConstructionTime(howLong = 1, mode = false, beginDay = new Date()){",
        "    let count = howLong //工作日",
        "    //每天的毫秒总数，用于以下换算",
        "    const daytime = 24 * 60 * 60 * 1000;",
        "    let res = 0",
        "    function constructionPeriodIsOver(howLong = 1, mode = false, beginDay = new Date()){",
        "        //结束日期",
        "        let end = (howLong - 1) * daytime + new Date(beginDay).getTime()",
        "        //周末节假日不算工期",
        "        if(mode) {",
        "            workDay = getWorkDayCount(new Date(beginDay),new Date(end))",
        "            if(workDay >= count){ //工期结束[实际工作天数 >= 工期天数]",
        "                return ",
        "            }else{ //没结束",
        "                res = (count + (howLong - workDay))",
        "                constructionPeriodIsOver(res,true)",
        "            }",
        "        }else{",
        "            return new Date(end)",
        "        }",
        "    }",
        "    constructionPeriodIsOver(count, mode, beginDay)",
        "    return new Date((res - 1) * daytime + new Date(beginDay).getTime())",
        "}",
        "console.log(getEndConstructionTime(10,true));"
      ],
      "description": [
      "计算两个日期之间的工作日(可自定义调休假期)"
      ]
  },
  "时间格式化(N天前)": {
    "prefix": ["format-time"],
    "body": [
      "function getDateDiff(dateStr){",
      "    var dateTimeStamp = Date.parse(dateStr.replace(/-/gi, '/'));",
      "    var minute = 1000 * 60;",
      "    var hour = minute * 60;",
      "    var day = hour * 24;",
      "    var halfamonth = day * 15;",
      "    var month = day * 30;",
      "    var now = new Date().getTime();",
      "    var diffValue = now - dateTimeStamp;",
      "    if (diffValue < 0) { return; }",
      "    var monthC = diffValue / month;",
      "    var weekC = diffValue / (7 * day);",
      "    var dayC = diffValue / day;",
      "    var hourC = diffValue / hour;",
      "    var minC = diffValue / minute;",
      "    var result = '';",
      "    if (monthC >= 1) {",
      "        result = '' + parseInt(monthC) + '月前';",
      "    } else if (weekC >= 1) {",
      "        result = '' + parseInt(weekC) + '周前';",
      "    } else if (dayC >= 1) {",
      "        result = '' + parseInt(dayC) + '天前';",
      "    } else if (hourC >= 1) {",
      "        result = '' + parseInt(hourC) + '小时前';",
      "    } else if (minC >= 1) {",
      "        result = '' + parseInt(minC) + '分钟前';",
      "    } else",
      "        result = '刚刚';",
      "    return result;",
      "}"
    ],
    "description": ["时间格式化(N天前)"]
  },
  "时间格式化(年月日)": {
    "prefix": ["format-time"],
    "body": [
      "function formatTime(curTime, type) {",
      "    if (!curTime) {",
      "      return ''",
      "    }",
      "    var nd = new Date(curTime)",
      "    var y = nd.getFullYear()",
      "    var mm = nd.getMonth() + 1",
      "    var d = nd.getDate()",
      "    var h = nd.getHours()",
      "    var m = nd.getMinutes()",
      "    if (mm < 10) {",
      "      mm = '0' + mm",
      "    }",
      "    if (d < 10) {",
      "      d = '0' + d",
      "    }",
      "    if (h < 10) {",
      "      h = '0' + h",
      "    }",
      "    if (m < 10) {",
      "      m = '0' + m",
      "    }",
      "    if (type == 'MM-DD') {",
      "      return mm + '-' + d",
      "    } else if (type == 'yyyy-MM-dd') {",
      "      return y + '-' + mm + '-' + d",
      "    } else if (type == 'week') {",
      "      return y + '年' + mm + '月' + d + '日　' + weekDay[nd.getDay()]",
      "    } else if (type == 'MM-DD&week') {",
      "      return mm + '-' + d + '　' + weekDay[nd.getDay()]",
      "    } else if (type == 'MM-DD&hh:mm') {",
      "      return mm + '-' + d + ' ' + h + ':' + m",
      "    } else if (type == '年月日') {",
      "      return y + '年' + mm + '月' + d + '日　'",
      "    }",
      "    return y + '-' + mm + '-' + d + ' ' + h + ':' + m",
      " }"
    ],
    "description": ["时间格式化(年月日)"]
  },
  "递归拷贝": {
    "prefix": ["hs-clone"],
    "body": [
      "function deepClone(initalObj, finalObj) {    ",
      "    var obj = finalObj || {};    ",
      "    for (var i in initalObj) {        ",
      "      if (typeof initalObj[i] === 'object') {",
      "        obj[i] = (initalObj[i].constructor === Array) ? [] : {};",
      "        arguments.callee(initalObj[i], obj[i]);",
      "      } else {",
      "        obj[i] = initalObj[i];",
      "      }",
      "    }    ",
      "    return obj;",
      "}"
    ],
    "description": ["递归拷贝"]
  },
  "判断是否是ip": {
    "prefix": ["zj-str-isIP"],
    "body": [
      "function isIP() {",
      "\tlet reSpaceCheck = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/;",
      "\tif (reSpaceCheck.test(this)) {",
      "\t\tthis.match(reSpaceCheck);",
      "\t\tif (RegExp.$1 <= 255 && RegExp.$1 >= 0 &&",
      "\t\t\tRegExp.$2 <= 255 && RegExp.$2 >= 0 &&",
      "\t\t\tRegExp.$3 <= 255 && RegExp.$3 >= 0 &&",
      "\t\t\tRegExp.$4 <= 255 && RegExp.$4 >= 0) {",
      "\t\t\treturn true;",
      "\t\t} else {",
      "\t\t\treturn false;",
      "\t\t}",
      "\t} else {",
      "\t\treturn false;",
      "\t}",
      "}"
    ],
    "description": ["判断是否是ip"]
  },
  "(es6)字符串转小写": {
    "prefix": ["str-toLowerCase"],
    "body": ["${1:str}.toLowerCase()"],
    "description": ["(es6)字符串转小写"]
  },
  "(es6)字符串转大写": {
    "prefix": ["str-toUpperCase"],
    "body": ["${1:str}.toUpperCase()"],
    "description": ["(es6)字符串转大写"]
  },
  "str-length": {
    "prefix": ["str-length"],
    "body": ["length"],
    "description": ["length返回字符串的长度"]
  },
  "str-split(字符串分割)": {
    "prefix": ["str-split"],
    "body": ["split(${1:(正则表达式)以原字符串中的什么关键字分割})"],
    "description": ["split(字符串分割)"]
  },
  "str-search": {
    "prefix": ["str-search"],
    "body": ["search(${0:正则表达式})"],
    "description": ["search查找字符返回索引(没有找到返回-1)"]
  },
  "str-replace替换": {
    "prefix": ["str-replace"],
    "body": [
      "${1:原目标}.replace(${2:需要替换的替换内容},${3:替换成什么}) //只会替换掉第一个,且原目标不变,需要重新赋值给一个变量}",
      "//如果你想把所有的都替换掉，要使用正则\t例: \"bob\".replace(/b/g, 'l') === 'lol'"
    ],
    "description": ["replace替换"]
  },
  "str-substring截取字符串": {
    "prefix": ["str-substring"],
    "body": ["substring(${1:开始位置}${2:,结束位置})"],
    "description": [
      "substring截取字符串(参数是起始位置和结束位置)",
      "例\"abcd\"从第二个开始截取substring(1);返回bcd"
    ]
  },
  "str-substr": {
    "prefix": ["str-substr"],
    "body": ["substring(${1:开始位置}${2:,长度})"],
    "description": ["substr截取字符串(参数是起始位置和长度)"]
  },
  "str-match提取多个": {
    "prefix": ["str-match"],
    "body": ["${1:str}.match(${2:reg})"],
    "description": ["提取多个(str方法),没有有匹配返回 null"]
  },
  "str-lastIndexOf": {
    "prefix": ["str-lastIndexOf"],
    "body": ["lastIndexOf(${1:索引})"],
    "description": ["lastIndexOf返回指定位置的字符(从右到左搜索)"]
  },
  "str-charAt": {
    "prefix": ["str-charAt"],
    "body": ["charAt(${1:索引})"],
    "description": ["charAt返回指定位置的字符(从左到右搜索)"]
  },
  "str-indexOf": {
    "prefix": ["str-indexOf"],
    "body": ["indexOf('${1:查找项}')"],
    "description": ["indexOf查找索引(如果没有匹配项，返回 -1)"]
  },
  "arr-sort数组排序": {
    "prefix": ["arr-sort"],
    "body": ["${1:需要排序的数组}.sort((a, b) => a - b)"],
    "description": ["sort数组排序"]
  },
  "arr-unshift": {
    "prefix": ["arr-unshift"],
    "body": ["unshift()"],
    "description": ["unshift将参数添加到原数组开头，并返回数组的长度"]
  },
  "arr-splice": {
    "prefix": ["arr-splice"],
    "body": [
      "splice(${1:从第几个开始删除},${2:删除几个}${3:[,插入项(多个用数组写)]})"
    ],
    "description": ["splice删除(替换)数组中的某些数据(返回删除的那个)"]
  },
  "arr-slice": {
    "prefix": ["arr-slice", "str-slice"],
    "body": [
      "slice(${1:起始索引(负数从最后开始索引)}${2:[,结束索引(默认到结束)]})"
    ],
    "description": ["slice从已有的数组(字符串)中返回选定的元素。"]
  },
  "arr-reverse": {
    "prefix": ["arr-reverse"],
    "body": ["reverse()"],
    "description": ["reverse颠倒数组中元素的顺序"]
  },
  "arr-push": {
    "prefix": ["arr-push"],
    "body": ["push()"],
    "description": ["push末尾添加元素,返回新的长度"]
  },
  "arr-pop": {
    "prefix": ["arr-pop"],
    "body": ["pop()"],
    "description": ["pop删除并返回数组的最后一个(删除元素)元素"]
  },
  "arr-join": {
    "prefix": ["arr-join"],
    "body": ["join()"],
    "description": ["join把数组中的所有元素放入一个字符串"]
  },
  "arr-concat": {
    "prefix": ["arr-concat", "str-concat"],
    "body": ["concat()"],
    "description": ["concat连接两个或多个数组(字符串),并返回一个新数组(字符串)"]
  },
  "arr-shift": {
    "prefix": ["arr-shift"],
    "body": ["shift()"],
    "description": ["shift把数组的第一个元素删除，并返回第一个元素的值"]
  },
  "opacity": {
    "prefix": ["opacity"],
    "body": ["opacity"],
    "description": ["opacity透明度(css)"]
  },

  "光标定位文本框最后": {
    "prefix": ["hs"],
    "body": [
      "/* ",
      " * 光标定位到最后",
      "*/",
      "function curPostLast() {",
      "\tvar e = event.srcElement;",
      "\tvar r = e.createTextRange();",
      "\tr.moveStart(\"character\", e.value.length);",
      "\tr.collapse(true);",
      "\tr.select();",
      "}"
    ],
    "description": ["光标定位文本框最后"]
  },

  "创建CSS规则": {
    "prefix": ["hs", "Sheet"],
    "body": [
      "/*",
      " * 创建新的CSS规则 ,常用语ajax",
      " *  调用: Sheet(\".test{ background: pink }\");",
      "*/",
      "// Build a better Sheet object ",
      "Sheet = (function() {",
      "\t// Build style",
      "\tvar style = document.createElement('style');",
      "\tstyle.setAttribute('media', 'screen');",
      "\tstyle.appendChild(document.createTextNode(''));",
      "\tdocument.head.appendChild(style);",
      "\t// Build and return a single function",
      "\treturn function(rule){ style.sheet.insertRule( rule, style.sheet.cssRules.length ); } ;",
      "})();"
    ],
    "description": ["创建CSS规则"]
  },

  "判断是否为原生JS": {
    "prefix": ["hs", "isNative"],
    "body": [
      "/*",
      "* 判断一个JavaScript函数是否是系统原生函数 ",
      "* isNative(alert); // true",
      "* isNative(myCustomFunction); // false ",
      "*/",
      ";(function() {",
      "\t// Used to resolve the internal `[[Class]]` of values",
      "\tvar toString = Object.prototype.toString;",
      "\t// Used to resolve the decompiled source of functions",
      "\tvar fnToString = Function.prototype.toString;",
      "\t// Used to detect host constructors (Safari > 4; really typed array specific)",
      "\tvar reHostCtor = /^\\[object .+?Constructor\\]$/;",
      "\t// Compile a regexp using a common native method as a template.",
      "\t// We chose `Object#toString` because there's a good chance it is not being mucked with.",
      "\tvar reNative = RegExp('^' +",
      "\t\t// Coerce `Object#toString` to a string",
      "\t\tString(toString)",
      "\t\t// Escape any special regexp characters",
      "\t\t.replace(/[.*+?^${}()|[\\]\\/\\\\]/g, '\\\\$&')",
      "\t\t// Replace mentions of `toString` with `.*?` to keep the template generic.",
      "\t\t// Replace thing like `for ...` to support environments like Rhino which add extra info",
      "\t\t// such as method arity.",
      "\t\t.replace(/toString|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'",
      "\t);",
      "\tfunction isNative(value) {",
      "\t\tvar type = typeof value;",
      "\t\treturn type == 'function'",
      "\t\t\t// Use `Function#toString` to bypass the value's own `toString` method",
      "\t\t\t// and avoid being faked out.",
      "\t\t\t? reNative.test(fnToString.call(value))",
      "\t\t\t// Fallback to a host object check because some environments will represent",
      "\t\t\t// things like typed arrays as DOM methods which may not conform to the",
      "\t\t\t// normal native pattern.",
      "\t\t\t: (value && type == 'object' && reHostCtor.test(toString.call(value))) || false;",
      "\t}",
      "\t// export however you want",
      "\tmodule.exports = isNative;",
      "}());"
    ],
    "description": ["判断是否为原生JS"]
  },

  "获取连接的绝对路径": {
    "prefix": ["hs", "getAbsoluteUrl"],
    "body": [
      "/**",
      " * 获取一个链接的绝对地址",
      " * 调用: getAbsoluteUrl('url');",
      " * 利用a标签 href 来生成完整的绝对URL",
      " */",
      "var getAbsoluteUrl = (function() {",
      "\tvar a;",
      "\treturn function(url) {",
      "\t\tif(!a) a = document.createElement('a');",
      "\t\ta.href = url;",
      "\t\treturn a.href;",
      "\t};",
      "})();"
    ],
    "description": ["获取连接的绝对路径"]
  },

  "只执行一次函数": {
    "prefix": ["hs", "once"],
    "body": [
      "/**",
      " *禁止重复调用、只允许执行一次函数",
      " * 调用：  once(function() {console.log('Fired!');});",
      " * @param {*} fn回调函数",
      " * @param {*} context",
      " * @returns",
      " */",
      "function once(fn, context) { ",
      "\tvar result;",
      "\treturn function() { ",
      "\t\tif(fn) {",
      "\t\t\tresult = fn.apply(context || this, arguments);",
      "\t\t\tfn = null;",
      "\t\t}",
      "\t\treturn result;",
      "\t};",
      "}"
    ],
    "description": ["只执行一次函数"]
  },

  "降频函数": {
    "prefix": ["hs", "debounce"],
    "body": [
      "/**",
      " *降频函数",
      " *这个 debounce 函数在给定的时间间隔内只允许你提供的回调函数执行一次，以此降低它的执行频率。",
      " *调用:\tdebounce(function() {}, 250); ",
      " * @param {*} func回调函数",
      " * @param {*} wait等待时间,推荐250",
      " * @param {*} immediate",
      " * @returns",
      " */",
      "function debounce(func, wait, immediate) {",
      "\tvar timeout;",
      "\treturn function() {",
      "\t\tvar context = this, args = arguments;",
      "\t\tvar later = function() {",
      "\t\t\ttimeout = null;",
      "\t\t\tif (!immediate) func.apply(context, args);",
      "\t\t};",
      "\t\tvar callNow = immediate && !timeout;",
      "\t\tclearTimeout(timeout);",
      "\t\ttimeout = setTimeout(later, wait);",
      "\t\tif (callNow) func.apply(context, args);",
      "\t};",
      "};"
    ],
    "description": ["降频函数"]
  },

  "常用正则表达式规则": {
    "prefix": ["help"],
    "body": [
      "// \\d匹配数字",
      "// \\D匹配非数字",
      "// \\w匹配数字字母下划线",
      "// \\W匹配非数字字母下划线",
      "// \\s匹配空白符",
      "// \\S匹配非空白符",
      "// .匹配非空白符的单个字符",
      "// ^以什么开头",
      "// $以什么结束",
      "// *前面的字符出现0次以上",
      "// +前面的字符出现最少1次",
      "// ?前面的字符出现0或1次",
      "// {n}前面的字符出现n次",
      "// {n,}前面的字符至少出现n次",
      "// {n,m}前面字符至少出现n次,最多m次",
      "// ()分组"
    ],
    "description": ["常用正则表达式规则"]
  },
  "提取单个": {
    "prefix": ["tq", "exec", "get", "js"],
    "body": ["${1:reg}.exec(${2:str})"],
    "description": ["提取单个(reg方法)"]
  },

  "分组提取": {
    "prefix": ["tq", "fztq", "get", "js"],
    "body": [
      "//正则表达式用()分组",
      "${1:reg}.test(${2:str})  //1.调用reg",
      "RegExp.$(第几组)"
    ],
    "description": ["分组提取"]
  },

  "汉字": {
    "prefix": ["zzbds"],
    "body": ["// 汉字", "^[\\u4e00-\\u9fa5]{0,}$"],
    "description": ["汉字"]
  },

  "英文和数字": {
    "prefix": ["zzbds"],
    "body": ["//英文和数字", "^[A-Za-z0-9]+$"],
    "description": ["英文和数字"]
  },

  "长度为3-20的所有字符": {
    "prefix": ["zzbds"],
    "body": ["//长度为3-20的所有字符", "^.{3,20}$"],
    "description": ["长度为3-20的所有字符"]
  },

  "由26个英文字母组成的字符串": {
    "prefix": ["zzbds"],
    "body": ["//由26个英文字母组成的字符串", "^[A-Za-z]+$"],
    "description": ["由26个英文字母组成的字符串"]
  },

  "由26个大写英文字母组成的字符串": {
    "prefix": ["zzbds"],
    "body": ["//由26个大写英文字母组成的字符串", "^[A-Z]+$"],
    "description": ["由26个大写英文字母组成的字符串"]
  },

  "由26个小写英文字母组成的字符串": {
    "prefix": ["zzbds"],
    "body": ["//由26个小写英文字母组成的字符串", "^[a-z]+$"],
    "description": ["由26个小写英文字母组成的字符串"]
  },

  "由数字和26个英文字母组成的字符串": {
    "prefix": ["zzbds"],
    "body": ["//由数字和26个英文字母组成的字符串", "^[A-Za-z0-9]+$"],
    "description": ["由数字和26个英文字母组成的字符串"]
  },

  "由数字、26个英文字母或者下划线组成的字符串": {
    "prefix": ["zzbds"],
    "body": ["//由数字、26个英文字母或者下划线组成的字符串", "^\\w+$"],
    "description": ["由数字、26个英文字母或者下划线组成的字符串"]
  },

  "中文、英文、数字包括下划线": {
    "prefix": ["zzbds"],
    "body": ["//中文、英文、数字包括下划线", "^[\\u4E00-\\u9FA5A-Za-z0-9_]+$"],
    "description": ["中文、英文、数字包括下划线"]
  },

  "中文、英文、数字但不包括下划线等符号": {
    "prefix": ["zzbds"],
    "body": [
      "//中文、英文、数字但不包括下划线等符号",
      "^[\\u4E00-\\u9FA5A-Za-z0-9]+$"
    ],
    "description": ["中文、英文、数字但不包括下划线等符号"]
  },

  "含有^%&',;=?$\\\"等字符": {
    "prefix": ["zzbds"],
    "body": ["//含有^%&',;=?$\\\"等字符", "[^%&',;=?$\\x22]+"],
    "description": ["含有^%&',;=?$\\\"等字符"]
  },

  "含有~的字符": {
    "prefix": ["zzbds"],
    "body": ["//含有~的字符", "[^~\\x22]+"],
    "description": ["含有~的字符"]
  },

  "Email地址": {
    "prefix": ["zzbds"],
    "body": [
      "//匹配Email地址",
      "^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"
    ],
    "description": ["匹配Email地址", "表单验证时很实用"]
  },

  "域名": {
    "prefix": ["zzbds"],
    "body": [
      "//域名",
      "[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?"
    ],
    "description": ["域名"]
  },

  "InternetURL": {
    "prefix": ["zzbds"],
    "body": ["//InternetURL", "[a-zA-z]+://[^s]*"],
    "description": [
      "InternetURL",
      "网上流传的版本功能很有限，上面这个基本可以满足需求"
    ]
  },

  "匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)": {
    "prefix": ["zzbds"],
    "body": [
      "//字母开头，允许5-16字节，允许字母数字下划线",
      "^[a-zA-Z][a-zA-Z0-9_]{4,15}$"
    ],
    "description": [
      "匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)",
      "表单验证时很实用"
    ]
  },

  "手机号码": {
    "prefix": ["zzbds"],
    "body": [
      "//手机号码",
      "^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$, //标准",
      "^1[356789]\\d{9}$ //1开头,第二位为356789"
    ],
    "description": ["手机号码"]
  },

  "电话号码": {
    "prefix": ["zzbds"],
    "body": ["//电话号码", "^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$"],
    "description": [
      "电话号码",
      "XXX-XXXXXXX、XXXX-XXXXXXXX、XXX-XXXXXXX、XXX-XXXXXXXX、XXXXXXX 和 XXXXXXXX"
    ]
  },

  "电话号码(支持手机号,3-4位区号,7-8位直播号,1-4位分机)": {
    "prefix": ["zzbds"],
    "body": [
      "//电话号码(支持手机号,3-4位区号,7-8位直播号,1-4位分机)",
      "((\\d{11})|^((\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8})-(\\d{4}|\\d{3}|\\d{2}|\\d{1})|(\\d{7,8})-(\\d{4}|\\d{3}|\\d{2}|\\d{1}))$)"
    ],
    "description": ["电话号码(支持手机号,3-4位区号,7-8位直播号,1-4位分机)"]
  },

  "匹配国内电话号码": {
    "prefix": ["zzbds"],
    "body": ["//匹配国内电话号码", "\\d{3}-\\d{8}|\\d{4}-\\d{7}"],
    "description": [
      "匹配国内电话号码",
      "匹配形式如 0511-4405222 或 021-87888822"
    ]
  },

  "密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)": {
    "prefix": ["zzbds"],
    "body": [
      "//密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)",
      "^[a-zA-Z]\\w{5,17}$"
    ],
    "description": [
      "密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)"
    ]
  },

  "强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)": {
    "prefix": ["zzbds"],
    "body": [
      "//强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)",
      "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$"
    ],
    "description": [
      "强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)"
    ]
  },

  "强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)": {
    "prefix": ["zzbds"],
    "body": [
      "//强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)",
      "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$"
    ],
    "description": [
      "强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)"
    ]
  },

  "日期格式": {
    "prefix": ["zzbds"],
    "body": [
      "//日期",
      "^19\\d{2}|20[01]\\d-(0?[1-9]|1[012])-(1\\d|2\\d|3[01]|0?[1-9]) //1900年开始到2020年",
      "^\\d{4}-\\d{1,2}-\\d{1,2} //0000-(0)00-(0)00"
    ],
    "description": ["日期格式"]
  },

  "一年的12个月(01～09和1～12)": {
    "prefix": ["zzbds"],
    "body": ["//一年的12个月(01～09和1～12)", "^(0?[1-9]|1[0-2])$"],
    "description": ["一年的12个月(01～09和1～12)"]
  },

  "一个月的31天(01～09和1～31)": {
    "prefix": ["zzbds"],
    "body": [
      "//一个月的31天(01～09和1～31)",
      "^((0?[1-9])|((1|2)[0-9])|30|31)$"
    ],
    "description": ["一个月的31天(01～09和1～31)"]
  },

  "匹配腾讯QQ号": {
    "prefix": ["zzbds"],
    "body": ["//QQ号", "^[1-9][0-9]{4,10}"],
    "description": ["匹配腾讯QQ号", "腾讯QQ号从10000开始"]
  },

  "匹配中国邮政编码": {
    "prefix": ["zzbds"],
    "body": ["//匹配中国邮政编码", "[1-9]\\d{5}(?!\\d)"],
    "description": ["匹配中国邮政编码", "中国邮政编码为6位数字"]
  },

  "匹配身份证": {
    "prefix": ["zzbds"],
    "body": ["//匹配身份证", "^\\d{15}$|^\\d{18}$|^\\d{17}[0-9xX]$"],
    "description": ["匹配身份证", "中国的身份证为15位或18位"]
  },

  "匹配ip地址": {
    "prefix": ["zzbds"],
    "body": [
      "//匹配ip地址",
      "((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))"
    ],
    "description": ["匹配ip地址"]
  },

  "xml文件": {
    "prefix": ["zzbds"],
    "body": ["//xml文件", "^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$"],
    "description": ["xml文件"]
  },

  "空白行": {
    "prefix": ["zzbds"],
    "body": ["//空白行", "\\n\\s*\\r"],
    "description": ["空白行", "可以用来删除空白行"]
  },

  "正整数": {
    "prefix": ["zzbds", "zznum"],
    "body": ["//正整数", "^[1-9]\\d*$"],
    "description": ["匹配特定数字(正整数)"]
  },

  "负整数": {
    "prefix": ["zzbds", "zznum"],
    "body": ["//负整数", "^-[1-9]\\d*$"],
    "description": ["匹配特定数字(负整数)"]
  },

  "整数": {
    "prefix": ["zzbds", "zznum"],
    "body": ["//整数", "^-?[1-9]\\d*$"],
    "description": ["匹配特定数字(整数)"]
  },

  "非负整数[正整数 + 0]": {
    "prefix": ["zzbds", "zznum"],
    "body": ["//非负整数[正整数 + 0]", "[1-9]\\d*|0$"],
    "description": ["匹配特定数字(非负整数[正整数 + 0])"]
  },

  "非正整数[负整数 + 0]": {
    "prefix": ["zzbds", "zznum"],
    "body": ["//非正整数[负整数 + 0]", "^-[1-9]\\d*|0$"],
    "description": ["匹配特定数字(非正整数[负整数 + 0])"]
  },

  "正浮点数": {
    "prefix": ["zzbds", "zznum"],
    "body": ["//正浮点数", "^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*$"],
    "description": ["匹配特定数字(正浮点数)"]
  },

  "负浮点数": {
    "prefix": ["zzbds", "zznum"],
    "body": ["//负浮点数", "^-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*)$"],
    "description": ["匹配特定数字(负浮点数)"]
  },

  "浮点数": {
    "prefix": ["zzbds", "zznum"],
    "body": ["//浮点数", "^-?([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0)$"],
    "description": ["匹配特定数字(浮点数)"]
  },

  "非负浮点数[正浮点数 + 0]": {
    "prefix": ["zzbds", "zznum"],
    "body": [
      "//非负浮点数[正浮点数 + 0]",
      "^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0$"
    ],
    "description": ["匹配特定数字(非负浮点数[正浮点数 + 0]))"]
  },

  "非正浮点数[负浮点数 + 0]": {
    "prefix": ["zzbds", "zznum"],
    "body": [
      "//非正浮点数[负浮点数 + 0]",
      "^(-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*))|0?.0+|0$"
    ],
    "description": ["匹配特定数字(非正浮点数[负浮点数 + 0])"]
  },

  "由26个英文字母组成": {
    "prefix": ["zzbds", "zzstr"],
    "body": ["//由26个英文字母组成", "^[A-Za-z]+$"],
    "description": ["匹配特定字符串(由26个英文字母组成)"]
  },

  "26个英文字母的大写组成": {
    "prefix": ["zzbds", "zzstr"],
    "body": ["//26个英文字母的大写组成", "^[A-Z]+$"],
    "description": ["匹配特定字符串(26个英文字母的大写组成)"]
  },

  "26个英文字母的小写组成": {
    "prefix": ["zzbds", "zzstr"],
    "body": ["//26个英文字母的小写组成", "^[a-z]+$"],
    "description": ["匹配特定字符串(26个英文字母的小写组成)"]
  },

  "数字和26个英文字母组成": {
    "prefix": ["zzbds", "zzstr"],
    "body": ["//数字和26个英文字母组成", "^[A-Za-z0-9]+$"],
    "description": ["匹配特定字符串(数字和26个英文字母组成)"]
  },

  "由数字、26个英文字母或者下划线组成": {
    "prefix": ["zzbds", "zzstr"],
    "body": ["//由数字、26个英文字母或者下划线组成", "^w+$"],
    "description": ["匹配特定字符串(由数字、26个英文字母或者下划线组成)"]
  },
  "sessionStorage本地存储": {
    "prefix": ["dc", "storage", "js"],
    "body": [
      "//sessionStorage本地存储(5M)",
      "//sessionStorage.setItem(key,value);存储",
      "//sessionStorage.getItem(key);得到",
      "//sessionStorage.removeItem(key);删除数据",
      "//sessionStorage.clear()删除全部数据",
      "window.sessionStorage.${1|setItem,getItem,removeItem,clear|}('${2:key(setItem时需要输入key,value)}');"
    ],
    "description": [
      "sessionStorage本地存储(5M)",
      "sessionStorage.setItem(key,value);存储",
      "sessionStorage.getItem(key);得到",
      "sessionStorage.removeItem(key);删除数据",
      "sessionStorage.clear()删除全部数据"
    ]
  },

  "localStorage本地存储": {
    "prefix": ["dc", "storage", "js"],
    "body": [
      "//localStorage本地存储(20M)",
      "//localStorage.setItem(key,value);存储",
      "//localStorage.getItem(key);得到",
      "//localStorage.removeItem(key);删除数据",
      "//localStorage.clear()删除全部数据",
      "window.localStorage.${1|setItem,getItem,removeItem,clear|}('${2:key(setItem时需要输入key,value)}');"
    ],
    "description": [
      "localStorage本地存储(20M)",
      "localStorage.setItem(key,value);存储",
      "localStorage.getItem(key);得到",
      "localStorage.removeItem(key);删除数据",
      "localStorage.clear()删除全部数据"
    ]
  },

  "touch手指触摸事件": {
    "prefix": ["touch", "dc"],
    "body": ["${1|touchstart,touchmove,touchend|}"],
    "description": [
      "touchstart触摸开始",
      "touchmove手指移动",
      "touchend手指离开"
    ]
  },

  "touch手指触摸事件对象属性": {
    "prefix": ["touch", "dc"],
    "body": [
      "//touches 正在触摸屏幕的所有手指的列表 ",
      "//targetTouches 正在触摸当前DOM元素的手指列表",
      "//changedTouches 手指状态发生了改变的列表",
      "//targetTouches[0] 得到正在触摸dom元素的第一个手指的相关信息",
      "${1|touches,targetTouches,changedTouches|}"
    ],
    "description": [
      "touches 正在触摸屏幕的所有手指的列表 ",
      "targetTouches 正在触摸当前DOM元素的手指列表",
      "changedTouches 手指状态发生了改变的列表",
      "targetTouches[0] 得到正在触摸dom元素的第一个手指的相关信息"
    ]
  },

  "物理像素比": {
    "prefix": ["dpr", "devicePixelRatio", "dc", "js"],
    "body": ["devicePixelRatio"],
    "description": ["物理像素比"]
  },

  "浏览器的信息navigator对象": {
    "prefix": ["navigator", "js"],
    "body": ["navigator()"],
    "description": [
      "navigator对象",
      "包含有关浏览器的信息",
      "根据浏览器不同实现跳转快捷键tz"
    ]
  },

  "offset相关的属性": {
    "prefix": ["offset", "dc", "get"],
    "body": [
      "//offsetParent：获取带有定位的最近父元素",
      "offset${1|Width,Height,Left,Top,Parent|}"
    ],
    "description": [
      "offset相关的属性",
      "offsetParent：获取带有定位的最近父元素"
    ]
  },

  "滚动": {
    "prefix": ["scorll", "dc", "js"],
    "body": [
      "//页面滚动兼容写法",
      "var docScrollTop = document.documentElement.scrollTop || document.body.scrollTop",
      "${1:window}.scorll(${2:X轴(不要加单位)},${3:Y轴(不要加单位)})"
    ],
    "description": [
      "scorll滚动事件",
      "注意scorll(x,y)[这里的坐标不要加单位]",
      "页面滚动事件源(监听对象)document",
      "页面被卷去的头部兼容性解决方案getScroll"
    ]
  },

  "client元素可视区相关的属性": {
    "prefix": ["client", "dc", "js"],
    "body": ["client${1|Width,Height,Left,Top|}"],
    "description": [
      "client相关的属性",
      "元素可视区相关信息",
      "width,height包括padding,不包含边框,返回值不带单位"
    ]
  },

  "scroll元素实际内容的相关的属性": {
    "prefix": ["scroll", "dc", "js"],
    "body": ["scroll${1|Width,Height,Left,Top|}"],
    "description": [
      "scroll相关的属性",
      "元素实际内容的相关信息",
      "常配合scroll滚动事件",
      "Top,Left内容滚动被卷去的大小",
      "width,height包括padding,不包含边框,返回值不带单位"
    ]
  },

  "location本地对象方法": {
    "prefix": ["location", "dc", "js"],
    "body": [
      "//assgin记录浏览历史，所以可以实现后退功能",
      "//replace不记录浏览历史替换当前页，不能后退",
      "//reload()刷新页面,里面如果参数为true，强制刷新ctrl+f5",
      "location.${1|assign,replace,reload|}(${2:url地址})"
    ],
    "description": [
      "location的方法",
      "assgin记录浏览历史，所以可以实现后退功能",
      "replace不记录浏览历史替换当前页，不能后退",
      "reload()刷新页面,里面如果参数为true，强制刷新ctrl+f5"
    ]
  },

  "location对象属性": {
    "prefix": ["location", "dc", "js"],
    "body": [
      "//href:设置或者获取地址栏信息路径",
      "//search：获取地址栏参数 例：(?name=zj&age=18)",
      "//host:返回主机（域名）",
      "//port:返回端口号",
      "//pathname:返回路径",
      "//hash：返回片段 #后面的内容，常见链接 锚点",
      "location.${1|href,search,host,port,pathname,hash|}"
    ],
    "description": [
      "location对象属性",
      "href:设置或者获取地址栏信息路径",
      "search：获取地址栏参数 例：(?name=zj&age=18)",
      "host:返回主机（域名）",
      "port:返回端口号",
      "pathname:返回路径",
      "hash：返回片段 #后面的内容，常见链接 锚点"
    ]
  },

  "停止定时器[Timeout]": {
    "prefix": ["clear", "stop", "clearTimeout", "dsq"],
    "body": ["clearTimeout(${1:需要清除的定时器})"],
    "description": ["停止定时器clearTimeout"]
  },

  "停止定时器[Interval]": {
    "prefix": ["clear", "stop", "clearInterval", "dsq"],
    "body": ["clearInterval(${1:需要清除的定时器})"],
    "description": ["停止定时器clearInterval"]
  },

  "定时器[执行一次]": {
    "prefix": ["dsq", "setTimeout"],
    "body": ["var timer = setTimeout(${2:调用函数},${1:延时时间(毫秒)})"],
    "description": [
      "[时间到执行一次]setTimeout(调用函数,延时时间)",
      "延时时间略,默认事件为0",
      "调用函数可以直接写函数或者函数名",
      "常给定时器赋值一个标识符:var time1 = setTimeout(调用函数,延时时间)"
    ]
  },

  "定时器[重复执行]": {
    "prefix": ["dsq", "setInterval"],
    "body": ["var timer = setInterval(${2:调用函数},${1:相隔时间(毫秒)})"],
    "description": [
      "[重复执行]setInterval(调用函数,相隔时间)",
      "调用函数可以直接写函数或者函数名",
      "常给定时器赋值一个标识符:var time1 = setInterval(调用函数,相隔时间)"
    ]
  },

  "当浏览器窗口大小发生变化触发事件": {
    "prefix": ["resize", "dc", "sj"],
    "body": ["resize"],
    "description": ["当浏览器窗口大小发生变化触发事件"]
  },

  "打印一个对象的所有属性": {
    "prefix": ["dir"],
    "body": ["console.dir()"],
    "description": ["打印一个对象的所有属性"]
  },

  "鼠标事件": {
    "prefix": ["blur", "mouse", "focus", "dc", "sb"],
    "body": ["${1|focus,blur|}"],
    "description": ["鼠标事件", "focus得到焦点", "blur失去焦点"]
  },

  "键盘事件": {
    "prefix": ["key", "jp", "dc"],
    "body": ["key${1|up,down,press|}"],
    "description": [
      "键盘事件",
      "keydown键盘按下时触发",
      "keyup键盘弹起时触发",
      "[H5新增]keypress键盘按下时触发[不能识别功能键ctrl Shift等]",
      "执行顺序keydown-keypress-keyup",
      "keyCode返回ASCII码,keyup和keydown不区分大小写"
    ]
  },

  "event键盘事件对象": {
    "prefix": ["key", "dc"],
    "body": ["keyCode"],
    "description": [
      "键盘事件对象",
      "用法event.keyCode",
      "keyCode返回ASCII码",
      "keypress事件区分字母大小写",
      "keyup和keydown不区分大小写"
    ]
  },

  "去除字符串中的空格": {
    "prefix": ["get", "trim"],
    "body": ["$.trim(${str})"],
    "description": ["去除字符串中的空格"]
  },

  "第一个子元素": {
    "prefix": ["firstElementChild", "dom"],
    "body": ["${1:父元素}.firstElementChild"],
    "description": ["第一个子元素", "父元素.firstElementChild"]
  },

  "最后一个子元素": {
    "prefix": ["lastElementChild", "dom"],
    "body": ["${1:父元素}.lastElementChild"],
    "description": ["最后一个子元素", "父元素.firstElementChild"]
  },

  "page鼠标在页面文档的x和y坐标": {
    "prefix": ["page", "zb"],
    "body": ["page${1|X,Y|}"],
    "description": ["鼠标在页面文档的x和y坐标"]
  },

  "client鼠标在可视区的x和y坐标": {
    "prefix": ["client", "zb"],
    "body": ["client${1|X,Y|}"],
    "description": ["鼠标在可视区的x和y坐标"]
  },

  "screen鼠标在电脑屏幕的x和y坐标": {
    "prefix": ["screen", "zb"],
    "body": ["screen${1|X,Y|}"],
    "description": ["鼠标在电脑屏幕的x和y坐标"]
  },

  "鼠标移动事件": {
    "prefix": ["mouse", "dc"],
    "body": ["mousemove"],
    "description": ["鼠标移动事件"]
  },

  "鼠标选中事件": {
    "prefix": ["selectstart", "mouse", "dc"],
    "body": ["selectstart"],
    "description": ["鼠标选中事件", "常配合preventDefault()禁用鼠标默认选中"]
  },

  "鼠标右键事件": {
    "prefix": ["contextmenu", "dc", "mouse"],
    "body": ["contextmenu"],
    "description": [
      "鼠标右键事件(有BUG,常直接禁用选中)",
      "常用禁止选中selectstart",
      "常配合preventDefault()禁用鼠标右键"
    ]
  },

  "获取HTML元素": {
    "prefix": ["html", "dom"],
    "body": ["document.documentElement"],
    "description": "获取HTML元素"
  },

  "创建元素": {
    "prefix": ["createElement", "dc", "create", "dom"],
    "body": ["createElement('$1')"],
    "description": [
      "创建元素",
      "父节点.createElement(要添加的节点)",
      "配合appendChild(向父节点末尾添加节点使用)",
      "配合insertBefore(向父节点指定子节点前面添加元素使用)"
    ]
  },

  "删除节点": {
    "prefix": ["remove", "del", "dc", "dom"],
    "body": ["removeChild('${1:需要删除的节点}')"],
    "description": [
      "删除节点",
      "父节点.removeChild(父节点[需要删除的节点])",
      "配合删除按钮事件常在删除前加上判断",
      "if(父节点.children.length == 0) {",
      "\tthis.disable = true;",
      "}"
    ]
  },

  "复制节点": {
    "prefix": ["clone", "dc", "dom"],
    "body": ["${1:需要克隆的节点}.cloneNode(${2:true})"],
    "description": [
      "复制节点node.cloneNode()浅克隆",
      "复制节点node.cloneNode(true)深克隆"
    ]
  },

  "节点前面添加节点": {
    "prefix": ["insertBefore", "dc", "dom", "add"],
    "body": [
      "${1:父节点}.appendChild(${2:需要添加的节点},${1:父节点}.children[0]);"
    ],
    "description": [
      "向父节点中的指定节点的前面添加节点",
      "父节点.insertBefore(添加的节点,指定节点)",
      "默认添加父元素的最前面"
    ]
  },

  "末尾添加元素": {
    "prefix": ["appendChild", "dc", "dom", "add"],
    "body": ["${1:父元素}.appendChild(${2:需要添加的元素});"],
    "description": "末尾添加元素"
  },

  "最后一个子元素节点": {
    "prefix": ["lastchild", "dc", "dom"],
    "body": ["${1:父元素}.children[${1:父元素}.children.length - 1]"],
    "description": "最后一个子元素节点"
  },

  "style": {
    "prefix": ["style", "dc"],
    "body": ["style"],
    "description": ["style"]
  },

  "backgroundColor背景": {
    "prefix": ["backgroundColor", "dc"],
    "body": ["backgroundColor"],
    "description": ["背景"]
  },

  "transparent透明": {
    "prefix": ["transparent", "dc"],
    "body": ["transparent"],
    "description": ["透明"]
  },

  "children": {
    "prefix": ["children", "dc"],
    "body": ["children"],
    "description": "(父元素).children"
  },

  "parentNode选择子节点的最近一个父节点": {
    "prefix": ["parentNode", "dc"],
    "body": ["parentNode"],
    "description": "选择子节点的最近一个父节点"
  },

  "getElementById": {
    "prefix": ["getElementById", "dc"],
    "body": ["getElementById"],
    "description": "DOM选择器ID选择器"
  },

  "querySelectorAll": {
    "prefix": ["h5-querySelectorAll", "dc"],
    "body": ["querySelectorAll"],
    "description": "[DOM选择器(H5)]"
  },

  "querySelector": {
    "prefix": ["h5-querySelector", "dc"],
    "body": ["querySelector"],
    "description": "[DOM选择器(H5)]"
  },

  "DOM(标签选择器)": {
    "prefix": ["dtn", "dc", "dom"],
    "body": ["document.getElementsByTagName('$1');"],
    "description": "[标签选择器]DOM"
  },

  "DOM(ID选择器)": {
    "prefix": ["dgi", "dc", "dom"],
    "body": ["document.getElementById('$1');"],
    "description": "[ID选择器]DOM"
  },

  "阻止冒泡": {
    "prefix": ["stopPropagation", "stop", "js"],
    "body": [
      "//阻止冒泡[DOM推荐标准(ie678不兼容)]",
      "//ie678用cancelBubble = true;",
      "//兼容处理快捷键jr-zzmp/jr-stopPropagation",
      "stopPropagation()"
    ],
    "description": [
      "阻止冒泡[DOM推荐标准(ie678不兼容)]",
      "ie678用cancelBubble = true;",
      "兼容处理快捷键jr-zzmp/jr-stopPropagation"
    ]
  },

  "阻止默认事件": {
    "prefix": ["preventDefault", "stop", "js"],
    "body": [
      "//阻止默认事件",
      "//preventDefault()[dom标准写法(ie678不兼容)]",
      "//ie678用returnValue",
      "//或者利用return false也能阻止默认行为,没有兼容问题(只限传统注册方式)",
      "preventDefault()"
    ],
    "description": [
      "阻止默认事件",
      "preventDefault()[dom标准写法(ie678不兼容)]",
      "ie678用returnValue",
      "或者利用return false也能阻止默认行为,没有兼容问题(只限传统注册方式)"
    ]
  },

  "type返回事件类型": {
    "prefix": ["type", "dc", "get"],
    "body": ["type"],
    "description": ["type", "返回事件类型(click,mouseover等等..)"]
  },

  "this": {
    "prefix": ["this", "dc"],
    "body": ["this"],
    "description": [
      "this",
      "返回绑定事件的对象(元素)",
      "与target区别:",
      "target返回触发事件的对象(元素)[ie678有兼容问题]",
      "相似属性currentTarget[ie678有兼容问题(不推荐使用)]",
      "定义时不能确定指向，调用时确定",
      "一般情况下this的最终指向的是那个调用它的对象",
      "1.全局作用域/普通函数/定时器中的this指向window",
      "2.方法调用中谁调用this指向谁",
      "3.构造函数中this指向构造函数的实例"
    ]
  },

  "target": {
    "prefix": ["target", "dc"],
    "body": ["target"],
    "description": [
      "target(ie9一下不兼容)",
      "需要判断兼容处理,快捷键jr-target",
      "返回触发事件的对象(元素)",
      "点击哪个元素就返回哪个元素",
      "与this区别",
      "this返回绑定事件的对象(元素)"
    ]
  },

  "注册监听事件": {
    "prefix": ["addEventListener", "dc", "add"],
    "body": [
      "addEventListener('${1|click,dblclick,mouseover,mouseout,mousedown,mouseup,keydown,keyup,keypress,focus,blur,submit,reset,select,copy,pageshow,scorll|}', function () {",
      "\t$2",
      "});"
    ],
    "description": [
      "监听注册事件(i9以下不兼容!)",
      "pageshow在页面切换后显示之后，触发的事件",
      "scorll滚动事件",
      "解决办法,兼容性函数,快捷键jr-zcsj/jr-addEventListener"
    ]
  },

  "dataset获取元素属性(H5)": {
    "prefix": ["dataset", "dc", "get"],
    "body": ["dataset.${1:直接写data-后面的属性}"],
    "description": [
      "获取元素属性(H5)",
      "兼容差ie11以上兼容",
      "如果自定义属性有多个-链接的单词",
      "获取时用驼峰命名法",
      "自定义属性",
      "设置:直接写data-name:'Spiderman'"
    ]
  },

  "getAttribute获取元素属性": {
    "prefix": ["getAttribute", "dc", "get"],
    "body": ["getAttribute('${1:属性名}')"],
    "description": ["获取元素属性"]
  },

  "setAttribute设置元素属性": {
    "prefix": ["setAttribute", "dc", "set"],
    "body": ["setAttribute('${1:属性名}','${2:属性值}')"],
    "description": "设置元素属性"
  },

  "removeAttribute删除元素属性": {
    "prefix": ["removeAttribute", "del", "dc"],
    "body": ["removeAttribute('${1:属性名}')"],
    "description": ["删除元素属性"]
  },

  "focus得到焦点": {
    "prefix": ["focus", "dc"],
    "body": ["focus"],
    "description": "得到焦点"
  },

  "blur失去焦点": {
    "prefix": ["blur", "dc"],
    "body": ["blur"],
    "description": "失去焦点"
  },

  "鼠标事件(会冒泡)": {
    "prefix": ["mouse", "dc"],
    "body": ["mouse${1|over,out|}"],
    "description": "鼠标经过事件"
  },

  "鼠标事件(不会会冒泡)": {
    "prefix": ["mouse", "dc"],
    "body": ["mouse${1|enter,leave|}"],
    "description": "鼠标经过事件"
  },

  "禁用按钮": {
    "prefix": ["jy", "dc", "stop"],
    "body": ["disabled = true;"],
    "description": ["节点.disabled = true;", "表单按钮禁用,button禁用"]
  },
  "监听注册兼容函数": {
    "prefix": ["jr-zc", "jr-addEventListener", "jr", "hs"],
    "body": [
      "//监听注册兼容函数",
      "//element为监听对象",
      "//eventName监听事件,要加引号(不加on)",
      "//fn为回调函数函数",
      "function compatibleAddEventListener(element, eventName, fn) {",
      "\t//判断当前浏览器是否支持addEventListener方法",
      "\tif (element.addEventListener) {",
      "\t\telement.addEventListener(eventName, fn); //第三个参数默认false",
      "\t} else if (element.attachEvent) {",
      "\t\telement.attachEvent('on' + eventName, fn);",
      "\t} else {",
      "\t\telement['on' + eventName] = fn;",
      "\t}",
      "};"
    ],
    "description": [
      "监听注册兼容函数",
      "element为监听对象",
      "eventName监听事件,要加引号(不加on)",
      "fn为回调函数函数"
    ]
  },

  "监听删除兼容函数": {
    "prefix": ["jr-del", "del", "jr", "hs"],
    "body": [
      "//监听删除兼容函数",
      "//element为监听对象",
      "//eventName监听事件,要加引号(不加on)",
      "//fn为调用的函数",
      "function compatibleRemoveEventListener(element, eventName, fn) {",
      "\t//判断当前浏览器是否支持removeEventListener方法",
      "\tif (element.removeEventListener) {",
      "\t\telement.removeEventListener(eventName, fn); //第三个参数默认false",
      "\t} else if (element.detachEvent) {",
      "\t\telement.detachEvent('on' + eventName, fn);",
      "\t} else {",
      "\t\telement['on' + eventName] = null;",
      "\t}",
      "};"
    ],
    "description": [
      "监听删除兼容函数",
      "element为监听对象",
      "eventName监听事件,要加引号(不加on)",
      "fn为调用的函数"
    ]
  },

  "兼容页面被卷去的头部": {
    "prefix": ["getSroll", "jr", "hs"],
    "body": [
      "//兼容页面被卷去的头部",
      "//使用的时候 getScroll().left[左侧] 或者 getScroll().top[头部]",
      "function getScroll() {",
      "\treturn {",
      "\t\tleft: window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0,",
      "\t\ttop: window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0",
      "\t};",
      "}"
    ],
    "description": [
      "兼容页面被卷去的头部",
      "使用的时候 getScroll().left[左侧] 或者 getScroll().top[头部]"
    ]
  },

  "兼容性获取兄弟节点": {
    "prefix": ["jr-sibling", "xd", "hs", "jr", "get"],
    "body": [
      "function get${1|Next,Previous|}ElementSibling(element) {",
      "\tvar el = element;",
      "\twhile (el = el.${1|nextSibling,previousSibling|}) {",
      "\t\tif (el.nodeType === 1) {",
      "\t\t\treturn el;",
      "\t\t}",
      "\t}",
      "\treturn null;",
      "}"
    ],
    "description": ["兼容性获取兄弟节点"]
  },

  "兼容处理target": {
    "prefix": ["jr-target", "jr"],
    "body": [
      "//兼容处理target",
      "//加上判断,ie678只能识别window.event",
      "//ie678只能识别srcElement",
      "e = event || window.event;",
      "var target = e.target || e.srcElement"
    ],
    "description": [
      "兼容处理target",
      "加上判断,ie678只能识别window.event",
      "ie678只能识别srcElement"
    ]
  },

  "兼容处理事件对象": {
    "prefix": ["jr-sjdx", "jr"],
    "body": ["event = event || window.event;"],
    "description": ["兼容处理事件对象", "加上判断,ie678只能识别window.event"]
  },

  "兼容处理阻止冒泡": {
    "prefix": ["jr-stop", "stop", "jr", "hs"],
    "body": [
      "//兼容处理阻止冒泡",
      "if(e && e.stopPropagation) {",
      "\te.stopPropagation();",
      "}else{",
      "\twindow.event.cancelBubble = true;",
      "}"
    ],
    "description": ["兼容处理阻止冒泡"]
  },

  "选择器[H5]新增(全部)": {
    "prefix": ["h5-dqa", "dqa"],
    "body": ["document.querySelectorAll('$1');"],
    "description": "[H5新增DOM]选择器<全部>"
  },

  "选择器[H5]新增": {
    "prefix": ["h5-dq", "dq"],
    "body": ["document.querySelector('$1');"],
    "description": "[H5新增DOM]选择器"
  },

  "typings自动补全配置": {
    "prefix": "typings",
    "body": [
      "typings自动补全配置",
      "项目根目录打开powershell",
      "输入",
      "typings init",
      "typings install dt~jquery --global --save",
      "创建文件",
      "jsconfig.json"
    ],
    "description": "typings自动补全配置"
  },
  "获取键盘ASCII": {
    "prefix": ["get", "ASCII", "hs"],
    "body": [
      "//获得键盘按下时的ASCII码",
      "function getKeyASCII (e) {",
      "\tdocument.addEventListener('key${1|up,press|}',function(e){ //keypress区分大小写",
      "\t\tconsole.log(e.keyCode);",
      "\t})",
      "}",
      "getKeyASCII();"
    ],
    "description": ["获取键盘ASCII(默认不区分大小写)", "keypress区分大小写"]
  },

  "反选按钮": {
    "prefix": ["fx", "hs"],
    "body": [
      "//反选按钮[在input中添加 onclick=theSelected() 调用函数",
      "function theSelected() {",
      "\t//获取全选按钮",
      "\tvar j_cbAll = document.querySelector('${1:全选按钮}');",
      "\t//获取反选按钮",
      "\tvar j_fx = document.querySelector('${2:反选按钮}');",
      "\t//获取所有的复选框",
      "\tvar j_tb = document.querySelectorAll('${3:所有的复选框}');",
      "\tfor (var i = 0; i < j_tb.length; i++) {",
      "\t\tj_tb[i].checked ? j_tb[i].checked = false : j_tb[i].checked = true;",
      "\t}",
      "\t//全选按钮相应操作",
      "\tvar flag = true;",
      "\tfor (i = 0; i < j_tb.length; i++) {",
      "\t\tif (!j_tb[i].checked) {",
      "\t\t\tflag = false;",
      "\t\t\tbreak;",
      "\t\t}",
      "\t}",
      "\tj_cbAll.checked = flag;",
      "}"
    ],
    "description": "事件-反选按钮[在input中添加 onclick=theSelected() 调用函数]"
  },

  "全选按钮": {
    "prefix": ["qx", "hs"],
    "body": [
      "var j_cbAll = document.querySelector('${1:全选按钮}'); // 获取全选按钮",
      "var j_tbs = document.querySelectorAll('${2:所有的复选框(input)}'); // 获取所有的复选框",
      "//注册事件",
      "j_cbAll.addEventListener('click', function () {",
      "\tfor (var i = 0; i < j_tbs.length; i++) {",
      "\t\tj_tbs[i].checked = this.checked;",
      "\t}",
      "})",
      "// 每次循环检查复选框是否全部选中",
      "for (var i = 0; i < j_tbs.length; i++) {",
      "\tj_tbs[i].addEventListener('click', function () {",
      "\t\t// flag 控制全选按钮是否选中",
      "\t\tvar flag = true;",
      "\t\t// 每次点击下面的复选框都要循环检查者4个小按钮是否全被选中",
      "\t\tfor (var i = 0; i < j_tbs.length; i++) {",
      "\t\t\tif (!j_tbs[i].checked) {",
      "\t\t\t\tflag = false;",
      "\t\t\t\tbreak;",
      "\t\t\t}",
      "\t\t}",
      "\t\tj_cbAll.checked = flag;",
      "\t})",
      "}"
    ],
    "description": "事件-全选按钮"
  },
  "将模板字符串参数拼接回去": {
    "prefix": ["hs"],
    "body": [
      "/**",
      " *  模板字符串",
      " *  调用: passthru`你好${a},很高兴见到你` => 你好（变量a）,很高兴见到你",
      " * @param {*} literals",
      " * @param {*} values",
      " * @returns 将模板字符串拼接回去",
      " */",
      "function passthru(literals, ...values) {",
      "\tlet output = \"\";",
      "\tlet index;",
      "\tfor (index = 0; index < values.length; index++) {",
      "\t\toutput += literals[index] + values[index];",
      "\t}",
      "\toutput += literals[index]",
      "\treturn output;",
      "}"
    ],
    "description": ["模板字符串拼接回去"]
  },
  "获取localStorage数据": {
    "prefix": ["hs", "localStorage", "get"],
    "body": [
      "/**",
      " * 获取localStorage数据",
      " * @param {*} key localStorage中的key string",
      " * @returns localStorage数据 arr",
      " */",
      "function getDate(key) {",
      "\tvar str = localStorage.getItem(key) || \"[]\";",
      "\tvar arr = JSON.parse(str);",
      "\treturn arr;",
      "}"
    ],
    "description": ["获取localStorage数据"]
  },
  "存储localStorage数据": {
    "prefix": ["localStorage", "set"],
    "body": ["localStorage.setItem('${1:key}',JSON.stringify(${2:arr}))"],
    "description": ["存储localStorage数据"]
  },
  "冒泡排序": {
    "prefix": ["px"],
    "body": [
      "//冒泡排序(默认从小到大)",
      "function bubbleSort(arr) {",
      "\tfor (var i = 0; i < arr.length; i++) {",
      "\t\tfor (var j = 0; j < arr.length - 1; j++) {",
      "\t\t\tif (arr[j] > arr[j + 1]) { //>从小到大,<从大到小",
      "\t\t\t\tlet temp = arr[j];",
      "\t\t\t\tarr[j] = arr[j + 1];",
      "\t\t\t\tarr[j + 1] = temp;",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "\treturn arr;",
      "}"
    ],
    "description": "冒泡排序(默认从小到大)"
  },
  "冒泡排序2.0": {
    "prefix": ["px", "hs"],
    "body": [
      "//冒泡排序2.0(默认从小到大)",
      "function bubbleSort(arr) {",
      "\tvar i = arr.length - 1; //初始时,最后位置保持不变　　",
      "\twhile (i > 0) {",
      "\t\tvar pos = 0; //每趟开始时,无记录交换",
      "\t\tfor (let j = 0; j < i; j++) {",
      "\t\t\tif (arr[j] > arr[j + 1]) { //>从小到大,<从大到小",
      "\t\t\t\tlet tmp = arr[j];",
      "\t\t\t\tpos = j; //记录交换的位置",
      "\t\t\t\tarr[j] = arr[j + 1];",
      "\t\t\t\tarr[j + 1] = tmp;",
      "\t\t\t}",
      "\t\t}",
      "\t\ti = pos; //为下一趟排序作准备",
      "\t}",
      "\treturn arr;",
      "}"
    ],
    "description": "冒泡排序2.0(默认从小到大)"
  },

  "快速排序": {
    "prefix": ["px", "hs"],
    "body": [
      "//快速排序(默认从小到大)",
      "function quickSort(array, left, right) {",
      "\tif (left < right) {",
      "\t\tvar x = array[right],",
      "\t\t\ti = left - 1,",
      "\t\t\ttemp;",
      "\t\tfor (var j = left; j <= right; j++) {",
      "\t\t\tif (array[j] <= x) {",
      "\t\t\t\ti++;",
      "\t\t\t\ttemp = array[i];",
      "\t\t\t\tarray[i] = array[j];",
      "\t\t\t\tarray[j] = temp;",
      "\t\t\t}",
      "\t\t}",
      "\t\tconsole.log(array);",
      "\t\tconsole.log(left, i);",
      "\t\tquickSort(array, left, i - 1);",
      "\t\tconsole.log(array)",
      "\t\tconsole.log(i, right)",
      "\t\tquickSort(array, i + 1, right);",
      "\t}",
      "\treturn array;",
      "}"
    ],
    "description": "快速排序(默认从小到大)"
  },
  "选择排序": {
    "prefix": ["px", "hs"],
    "body": [
      "//选择排序(默认从小到大),1000个以内数据比冒泡2.0快",
      "function selectionSort(arr) {",
      "\tvar len = arr.length;",
      "\tvar minIndex, temp;",
      "\tfor (var i = 0; i < len - 1; i++) {",
      "\t\tminIndex = i;",
      "\t\tfor (var j = i + 1; j < len; j++) {",
      "\t\t\tif (arr[j] < arr[minIndex]) { //寻找最小的数",
      "\t\t\t\tminIndex = j; //将最小数的索引保存",
      "\t\t\t}",
      "\t\t}",
      "\t\ttemp = arr[i];",
      "\t\tarr[i] = arr[minIndex];",
      "\t\tarr[minIndex] = temp;",
      "\t}",
      "\treturn arr;",
      "}"
    ],
    "description": "选择排序(默认从小到大),1000个以内数据比冒泡2.0快"
  },

  "区间求和": {
    "prefix": ["add", "hs"],
    "body": [
      "//区间求和",
      "function getSum(num1, num2) {",
      "\tvar sum = 0;",
      "\tfor (var i = num1; i <= num2; i++) {",
      "\t\tsum += i;",
      "\t}",
      "\treturn sum;",
      "}"
    ],
    "description": "function-区间求和"
  },

  "数组去重(纯for循环版本)": {
    "prefix": ["qc", "disTinct", "hs"],
    "body": [
      "//数组去重",
      "function disTinct(arr) {",
      "\tvar ans = [];",
      "\tfor (var i = arr.length - 1; i >= 0; i--) {",
      "\t\tvar nb = 0; //没重复为0.有重复不为0",
      "\t\tfor (var j = i - 1; j >= 0; j--) {",
      "\t\t\tif (arr[i] == arr[j]) {",
      "\t\t\t\tnb = 1;",
      "\t\t\t\tbreak;",
      "\t\t\t}",
      "\t\t}",
      "\t\tif (nb == 0) {",
      "\t\t    ans.unshift(arr[i])",
      "\t\t}",
      "\t}",
      "\treturn ans;",
      "}"
    ],
    "description": ["数组去重", "纯for循环版本"]
  },

  "数组去重2.0(indexOf版本)": {
    "prefix": ["qc", "unique", "hs"],
    "body": [
      "//数组去重(indexOf)",
      "function unique(arr) {",
      "\tvar res = [];",
      "\tfor (var i = 0; i < arr.length; i++) {",
      "\t\tif (res.indexOf(arr[i]) == -1) {",
      "\t\t\tres.push(arr[i])",
      "\t\t}",
      "\t}",
      "\treturn res;",
      "}"
    ],
    "description": ["数组去重", "indexOf版本"]
  },

  "构造函数(动态添加对象属性)": {
    "prefix": ["gzhs", "hs"],
    "body": [
      "function $Fn(value1, value2, value3) {",
      "\tthis.$name1 = value1;",
      "\tthis.$name2 = value2;",
      "\tthis.$name3 = value3;",
      "}"
    ],
    "description": "存储var Fn = new $Fn('','','')"
  },

  "随机整数": {
    "prefix": ["sjzs", "hs"],
    "body": [
      "function getRandom(min, max) {",
      "\treturn Math.floor(Math.random() * (max - min + 1)) + min;",
      "}"
    ],
    "description": "随机整数(可以取值到最大或者最小)"
  },
  "获取当前年月日星期几几点几分几秒并打印": {
    "prefix": ["time", "sj", "hs", "get"],
    "body": [
      "//获取当前年月日星期几几点几分几秒并打印",
      "function getTimer() {",
      "\tvar date = new Date();",
      "\tvar week = ['星期日', '星期一', '星期二', '星期三', '星\t期四', '星期五', '星期六'];",
      "\tvar year = date.getFullYear();",
      "\tvar month = date.getMonth() + 1;",
      "\tvar datee = date.getDate();",
      "\tvar day = date.getDay();",
      "\tvar time = year + '年' + month + '月' + datee + '日 \t' + week[day];",

      "\tfunction getTimerr() {",
      "\t\tvar time = new Date();",
      "\t\tvar hour = time.getHours();",
      "\t\thour = hour < 10 ? '0' + hour : hour;",
      "\t\tvar minute = time.getMinutes();",
      "\t\tminute = minute < 10 ? '0' + minute : minute;",
      "\t\tvar second = time.getSeconds();",
      "\t\tsecond = second < 10 ? '0' + second : second;",
      "\t\treturn hour + ':' + minute + ':' + second;",
      "\t}",
      "\treturn time + ' ' + getTimerr();",
      "}"
    ],
    "description": "获取当前年月日星期几几点几分几秒并打印"
  },

  "倒计时": {
    "prefix": ["djs", "hs"],
    "body": [
      "//倒计时",
      "function countDown(time) {",
      "\tvar nowTime = +new Date(); //当前时间总毫秒数",
      "\tvar inputTime = +new Date(time); //输入时间总毫秒数",
      "\tvar times = (inputTime - nowTime) / 1000; //剩余时间总秒数",
      "\tvar d = parseInt(times / 60 / 60 / 24); //天",
      "\td = d < 10 ? '0' + d : d;",
      "\tvar h = parseInt(times / 60 / 60 % 24); //时",
      "\th = h < 10 ? '0' + h : h;",
      "\tvar m = parseInt(times / 60 % 60); // 分",
      "\tm = m < 10 ? '0' + m : m;",
      "\tvar s = parseInt(times % 60); //秒",
      "\ts = s < 10 ? '0' + s : s;",
      "\treturn d + '天' + h + '时' + m + '分' +s + '秒';",
      "}"
    ],
    "description": "倒计时"
  },

  "倒计时2.0": {
    "prefix": ["djs", "hs"],
    "body": [
      "//倒计时",
      "//调用格式countDown('2019-5-5 21:08'); ",
      "//到时间自动停止",
      "var hour = document.querySelector('${1:小时目标盒子}');",
      "var minute = document.querySelector('${2:分钟目标盒子}');",
      "var second = document.querySelector('${3:秒钟目标盒子}');",
      "function countDown(time) {",
      "\tvar otime = time;",
      "\tvar fn = null;",
      "\tvar nowTime = +new Date(); //当前时间总毫秒数",
      "\tvar inputTime = +new Date(time); //输入时间总毫秒数",
      "\tvar times = (inputTime - nowTime) / 1000; //剩余时间总秒数",
      "\t//判断剩余时间大于0",
      "\tif (times >= 0) {",
      "\t\t// var d = parseInt(times / 60 / 60 / 24); //天",
      "\t\t// d = d < 10 ? '0' + d : d;",
      "\t\tvar h = parseInt(times / 60 / 60 % 24); //时",
      "\t\th = h < 10 ? '0' + h : h;",
      "\t\thour.innerHTML = h;",
      "\t\tvar m = parseInt(times / 60 % 60); // 分",
      "\t\tm = m < 10 ? '0' + m : m;",
      "\t\tminute.innerHTML = m;",
      "\t\tvar s = parseInt(times % 60); //秒",
      "\t\ts = s < 10 ? '0' + s : s;",
      "\t\tsecond.innerHTML = s;",
      "\t\t//定时器",
      "\t\tfn = setInterval(function () {",
      "\t\t\tcountDown(otime)",
      "\t\t}, 1000);",
      "\t} else {",
      "\t\tclearInterval(fn);",
      "\t\thour.innerHTML = \"00\";",
      "\t\tminute.innerHTML = \"00\";",
      "\t\tsecond.innerHTML = \"00\";",
      "\t}",
      "}",
      "countDown('${5:2019-5-5 21:08}');  //截止时间"
    ],
    "description": [
      "倒计时2.0",
      "调用格式countDown('2019-5-5 21:08'); ",
      "新增到时间自动停止"
    ]
  },

  "BOM加载事件": {
    "prefix": ["BOM", "hs", "load"],
    "body": ["window.addEventListener('load', function() {$1})"],
    "description": [
      "都不推荐使用,蚝性能",
      "load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等 执行事件",
      "pageshow 页面切换后显示之后，触发的事件",
      "DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些",
      "DOMContentLoaded 方法加载快捷键BOM-domcload"
    ]
  },

  "DOMContentLoaded加载事件": {
    "prefix": ["BOM", "hs", "load"],
    "body": ["document.addEventListener('DOMContentLoaded', function() {$1})"],
    "description": [
      "都不推荐使用,蚝性能",
      "load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等 执行事件",
      "DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些",
      "load 方法加载快捷键BOM-load"
    ]
  },

  "淘宝flexble.js自适应": {
    "prefix": ["rem", "zsy", "csh", "hs"],
    "body": [
      "(function flexible(window, document) {",
      "\tvar docEl = document.documentElement",
      "\tvar dpr = window.devicePixelRatio || 1",
      "",
      "\t// adjust body font size",
      "\tfunction setBodyFontSize() {",
      "\t\tif (document.body) {",
      "\t\t\tdocument.body.style.fontSize = (12 * dpr) + 'px'",
      "\t\t} else {",
      "\t\t\tdocument.addEventListener('DOMContentLoaded', setBodyFontSize)",
      "\t\t}",
      "\t}",
      "\tsetBodyFontSize();",
      "\t// set 1rem = viewWidth / 10",
      "\tfunction setRemUnit() {",
      "\t\tvar rem = docEl.clientWidth / 10",
      "\t\tdocEl.style.fontSize = rem + 'px'",
      "\t}",
      "\tsetRemUnit()",
      "",
      "\t// reset rem unit on page resize",
      "\twindow.addEventListener('resize', setRemUnit)",
      "\twindow.addEventListener('pageshow', function(e) {",
      "\t\tif (e.persisted) {",
      "\t\t\tsetRemUnit()",
      "\t\t}",
      "\t})",
      "",
      "\t// detect 0.5px supports",
      "\tif (dpr >= 2) {",
      "\t\tvar fakeBody = document.createElement('body')",
      "\t\tvar testElement = document.createElement('div')",
      "\t\ttestElement.style.border = '.5px solid transparent'",
      "\t\tfakeBody.appendChild(testElement)",
      "\t\tdocEl.appendChild(fakeBody)",
      "\t\tif (testElement.offsetHeight === 1) {",
      "\t\t\tdocEl.classList.add('hairlines')",
      "\t\t}",
      "\t\tdocEl.removeChild(fakeBody)",
      "\t}",
      "}(window, document))"
    ],
    "description": ["淘宝flexble.js自适应"]
  },

  "动画函数(横向缓动动画)": {
    "prefix": ["dh", "animate", "hs"],
    "body": [
      "//动画(横向缓动动画)",
      "//target目标位置",
      "//interval间隔事件",
      "//callback回调函数(可不填)",
      "function animate(obj, target, interval,callback) {",
      "\t//清除定时器",
      "\tclearInterval(obj.timer);",
      "\tobj.timer = setInterval(function() {",
      "\t\t//步长",
      "\t\tvar step = (target - obj.offsetLeft) / 10;",
      "\t\tstep = step > 0 ? Math.ceil(step) : Math.floor(step);",
      "\t\t//到目标位置停止",
      "\t\tif (obj.offsetLeft == target) {",
      "\t\t\tclearInterval(obj.timer);",
      "\t\t\tcallback && callback();",
      "\t\t}",
      "\t\tobj.style.left = obj.offsetLeft + step + \"px\";",
      "\t}, interval);",
      "}"
    ],
    "description": [
      "动画函数",
      "target目标位置",
      "interval间隔事件",
      "callback回调函数(可不填)"
    ]
  },

  "动画函数(window竖向缓动动画)": {
    "prefix": ["dh", "animate", "hs"],
    "body": [
      "//动画(window竖向缓动动画)",
      "//target目标位置",
      "//interval间隔事件",
      "//callback回调函数(可不填)",
      "function animate(obj, target, interval,callback) {",
      "\t//清除定时器",
      "\tclearInterval(obj.timer);",
      "\tobj.timer = setInterval(function() {",
      "\t\t//步长",
      "\t\tvar step = (target - window.pageYOffset) / 10;",
      "\t\tstep = step > 0 ? Math.ceil(step) : Math.floor(step);",
      "\t\t//到目标位置停止",
      "\t\tif (window.pageYOffset == target) {",
      "\t\t\tclearInterval(obj.timer);",
      "\t\t\tcallback && callback();",
      "\t\t}",
      "\t\twindow.scroll(0, window.pageYOffset + step);",
      "\t}, interval);",
      "}"
    ],
    "description": [
      "动画函数(window竖向缓动动画)",
      "target目标位置",
      "interval间隔事件",
      "callback回调函数(可不填)"
    ]
  },

  "拖动元素": {
    "prefix": ["td", "tuodong", "hs"],
    "body": [
      "${1:需要拖动的元素}.addEventListener('mousedown', function (e) {",
      "\tvar x = e.pageX - this.offsetLeft;",
      "\tvar y = e.pageY - this.offsetTop;",
      "\tdocument.addEventListener('mousemove', myFn);",

      "\tfunction myFn(e) {",
      "\t\t${1:需要拖动的元素}.style.left = e.pageX - x + 'px';",
      "\t\t${1:需要拖动的元素}.style.top = e.pageY - y + 'px';",
      "\t}",
      "\tdocument.addEventListener('mouseup', function () {",
      "\t\tdocument.removeEventListener('mousemove', myFn);",
      "\t})",
      "})"
    ],
    "description": ["拖动元素"]
  },

  "放大镜": {
    "prefix": ["fdj", "fangdajing", "hs"],
    "body": [
      "//外联单独JS用",
      "window.addEventListener('load', function () {",
      "\tvar preview_img = document.querySelector('${1:最大的盒子(包裹小图,遮挡层,大图的盒子)}');",
      "\tvar mask = document.querySelector('${2:小图中的遮挡层(放大镜)}');",
      "\tvar big = document.querySelector('${3:大图的盒子}');",
      "\t// 鼠标经过 preview_img 显示和隐藏 mask 遮挡层 和 big 大盒子",
      "\tpreview_img.addEventListener('mouseover', function () {",
      "\t\tmask.style.display = 'block';",
      "\t\tbig.style.display = 'block';",
      "\t})",
      "\tpreview_img.addEventListener('mouseout', function () {",
      "\t\tmask.style.display = 'none';",
      "\t\tbig.style.display = 'none';",
      "\t})",
      "\t//鼠标移动的时候，遮挡层的盒子跟着鼠标来走",
      "\tpreview_img.addEventListener('mousemove', function (e) {",
      "\t\t// 计算鼠标在小盒子内的坐标",
      "\t\tvar x = e.pageX - this.offsetLeft;",
      "\t\tvar y = e.pageY - this.offsetTop;",
      "\t\t// mask 移动的距离",
      "\t\tvar maskX = x - mask.offsetWidth / 2;",
      "\t\tvar maskY = y - mask.offsetHeight / 2;",
      "\t\t// 遮挡层的最大移动距离",
      "\t\tvar maskMaxX = preview_img.offsetWidth - mask.offsetWidth;",
      "\t\tvar maskMaxY = preview_img.offsetHeight - mask.offsetHeight;",
      "\t\tif (maskX <= 0) {",
      "\t\t\tmaskX = 0;",
      "\t\t} else if (maskX >= maskMaxX) {",
      "\t\t\tmaskX = maskMaxX;",
      "\t\t}",
      "\t\tif (maskY <= 0) {",
      "\t\t\tmaskY = 0;",
      "\t\t} else if (maskY >= maskMaxY) {",
      "\t\t\tmaskY = maskMaxY;",
      "\t\t}",
      "\t\tmask.style.left = maskX + 'px';",
      "\t\tmask.style.top = maskY + 'px';",
      "\t\t// 大图",
      "\t\tvar bigIMg = document.querySelector('${4:大图}');",
      "\t\t// 大图片最大移动距离",
      "\t\tvar bigMaxX = bigIMg.offsetWidth - big.offsetWidth;",
      "\t\tvar bigMaxY = bigIMg.offsetHeight - big.offsetHeight;",
      "\t\t// 大图片的移动距离 X Y",
      "\t\tvar bigX = maskX * bigMaxX / maskMaxX;",
      "\t\tvar bigY = maskY * bigMaxY / maskMaxY;",
      "\t\tbigIMg.style.left = -bigX + 'px';",
      "\t\tbigIMg.style.top = -bigY + 'px';",
      "\t})",
      "})"
    ],
    "description": ["放大镜", "外联单独JS用"]
  },

  "根据浏览器不同实现跳转": {
    "prefix": ["tz", "hs"],
    "body": [
      "//根据浏览器不同实现跳转(JS放到开头)",
      "if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {",
      "\twindow.location.href = \"\"; //手机",
      "} else {",
      "\twindow.location.href = \"\"; //电脑",
      "}"
    ],
    "description": ["根据浏览器不同实现跳转", "JS放到开头"]
  },

  "导航栏鼠标跟随点击动画效果": {
    "prefix": ["hs", "nav"],
    "body": [
      "// 获取元素",
      "var cloud = document.querySelector('${1:需要做动画效果的遮挡层(背景)}');",
      "var c_nav = document.querySelector('${2:li的父级(ul)}');",
      "var lis = c_nav.querySelectorAll('${3:所有的小li}');",
      "// current 动画起始位置",
      "var current = 0;",
      "// 给所有的小li绑定事件 ",
      "for (var i = 0; i < lis.length; i++) {",
      "\t// (1) 鼠标经过把当前小li 的位置做为目标值",
      "\tlis[i].addEventListener('mouseenter', function () {",
      "\t\tanimate(cloud, this.offsetLeft);",
      "\t});",
      "\t// (2) 鼠标离开就回到起始的位置 ",
      "\tlis[i].addEventListener('mouseleave', function () {",
      "\t\tanimate(cloud, current);",
      "\t});",
      "\t// (3) 当我们鼠标点击，就把当前位置做为目标值",
      "\tlis[i].addEventListener('click', function () {",
      "\t\tcurrent = this.offsetLeft;",
      "\t});",
      "}"
    ],
    "description": [
      "导航栏动画",
      "鼠标移动切换背景",
      "移开回到起始位置",
      "点击把当前位置作为目标位置"
    ]
  },

  "移动端拖动元素": {
    "prefix": ["td", "hs"],
    "body": [
      "移动端拖动元素",
      "var div = document.querySelector('${1:目标盒子}');",
      "var startX = 0; //获取手指初始坐标",
      "var startY = 0;",
      "var x = 0; //获得盒子原来的位置",
      "var y = 0;",
      "div.addEventListener('touchstart', function(e) {",
      "\t//  获取手指初始坐标",
      "\tstartX = e.targetTouches[0].pageX;",
      "\tstartY = e.targetTouches[0].pageY;",
      "\tx = this.offsetLeft;",
      "\ty = this.offsetTop;",
      "});",
      "div.addEventListener('touchmove', function(e) {",
      "\t//  计算手指的移动距离： 手指移动之后的坐标减去手指初始的坐标",
      "\tvar moveX = e.targetTouches[0].pageX - startX;",
      "\tvar moveY = e.targetTouches[0].pageY - startY;",
      "\t// 移动盒子 盒子原来的位置 + 手指移动的距离",
      "\tthis.style.left = x + moveX + 'px';",
      "\tthis.style.top = y + moveY + 'px';",
      "\te.preventDefault(); // 阻止屏幕滚动的默认行为",
      "});"
    ],
    "description": ["移动端拖动元素"]
  },

  "[H5必插入]fastclick清除click300ms延时": {
    "prefix": ["csh", "fastclick", "fastclick-js"],
    "body": [
      "!function(){\"use strict\";function FastClick(layer,options){var oldOnClick;if(options=options||{},this.trackingClick=!1,this.trackingClickStart=0,this.targetElement=null,this.touchStartX=0,this.touchStartY=0,this.lastTouchIdentifier=0,this.touchBoundary=options.touchBoundary||10,this.layer=layer,this.tapDelay=options.tapDelay||200,this.tapTimeout=options.tapTimeout||700,!FastClick.notNeeded(layer)){for(var methods=[\"onMouse\",\"onClick\",\"onTouchStart\",\"onTouchMove\",\"onTouchEnd\",\"onTouchCancel\"],context=this,i=0,l=methods.length;i<l;i++)this[methods[i]]=bind(this[methods[i]],this);deviceIsAndroid&&(layer.addEventListener(\"mouseover\",this.onMouse,!0),layer.addEventListener(\"mousedown\",this.onMouse,!0),layer.addEventListener(\"mouseup\",this.onMouse,!0)),layer.addEventListener(\"click\",this.onClick,!0),layer.addEventListener(\"touchstart\",this.onTouchStart,!1),layer.addEventListener(\"touchmove\",this.onTouchMove,!1),layer.addEventListener(\"touchend\",this.onTouchEnd,!1),layer.addEventListener(\"touchcancel\",this.onTouchCancel,!1),Event.prototype.stopImmediatePropagation||(layer.removeEventListener=function(type,callback,capture){var rmv=Node.prototype.removeEventListener;\"click\"===type?rmv.call(layer,type,callback.hijacked||callback,capture):rmv.call(layer,type,callback,capture)},layer.addEventListener=function(type,callback,capture){var adv=Node.prototype.addEventListener;\"click\"===type?adv.call(layer,type,callback.hijacked||(callback.hijacked=function(event){event.propagationStopped||callback(event)}),capture):adv.call(layer,type,callback,capture)}),\"function\"==typeof layer.onclick&&(oldOnClick=layer.onclick,layer.addEventListener(\"click\",function(event){oldOnClick(event)},!1),layer.onclick=null)}function bind(method,context){return function(){return method.apply(context,arguments)}}}var deviceIsWindowsPhone=navigator.userAgent.indexOf(\"Windows Phone\")>=0,deviceIsAndroid=navigator.userAgent.indexOf(\"Android\")>0&&!deviceIsWindowsPhone,deviceIsIOS=/iP(ad|hone|od)/.test(navigator.userAgent)&&!deviceIsWindowsPhone,deviceIsIOS4=deviceIsIOS&&/OS 4_\\d(_\\d)?/.test(navigator.userAgent),deviceIsIOSWithBadTarget=deviceIsIOS&&/OS [6-7]_\\d/.test(navigator.userAgent),deviceIsBlackBerry10=navigator.userAgent.indexOf(\"BB10\")>0;FastClick.prototype.needsClick=function(target){switch(target.nodeName.toLowerCase()){case\"button\":case\"select\":case\"textarea\":if(target.disabled)return!0;break;case\"input\":if(deviceIsIOS&&\"file\"===target.type||target.disabled)return!0;break;case\"label\":case\"iframe\":case\"video\":return!0}return/\\bneedsclick\\b/.test(target.className)},FastClick.prototype.needsFocus=function(target){switch(target.nodeName.toLowerCase()){case\"textarea\":return!0;case\"select\":return!deviceIsAndroid;case\"input\":switch(target.type){case\"button\":case\"checkbox\":case\"file\":case\"image\":case\"radio\":case\"submit\":return!1}return!target.disabled&&!target.readOnly;default:return/\\bneedsfocus\\b/.test(target.className)}},FastClick.prototype.sendClick=function(targetElement,event){var clickEvent,touch;document.activeElement&&document.activeElement!==targetElement&&document.activeElement.blur(),touch=event.changedTouches[0],(clickEvent=document.createEvent(\"MouseEvents\")).initMouseEvent(this.determineEventType(targetElement),!0,!0,window,1,touch.screenX,touch.screenY,touch.clientX,touch.clientY,!1,!1,!1,!1,0,null),clickEvent.forwardedTouchEvent=!0,targetElement.dispatchEvent(clickEvent)},FastClick.prototype.determineEventType=function(targetElement){return deviceIsAndroid&&\"select\"===targetElement.tagName.toLowerCase()?\"mousedown\":\"click\"},FastClick.prototype.focus=function(targetElement){var length;deviceIsIOS&&targetElement.setSelectionRange&&0!==targetElement.type.indexOf(\"date\")&&\"time\"!==targetElement.type&&\"month\"!==targetElement.type&&\"email\"!==targetElement.type?(length=targetElement.value.length,targetElement.setSelectionRange(length,length)):targetElement.focus()},FastClick.prototype.updateScrollParent=function(targetElement){var scrollParent,parentElement;if(!(scrollParent=targetElement.fastClickScrollParent)||!scrollParent.contains(targetElement)){parentElement=targetElement;do{if(parentElement.scrollHeight>parentElement.offsetHeight){scrollParent=parentElement,targetElement.fastClickScrollParent=parentElement;break}parentElement=parentElement.parentElement}while(parentElement)}scrollParent&&(scrollParent.fastClickLastScrollTop=scrollParent.scrollTop)},FastClick.prototype.getTargetElementFromEventTarget=function(eventTarget){return eventTarget.nodeType===Node.TEXT_NODE?eventTarget.parentNode:eventTarget},FastClick.prototype.onTouchStart=function(event){var targetElement,touch,selection;if(event.targetTouches.length>1)return!0;if(targetElement=this.getTargetElementFromEventTarget(event.target),touch=event.targetTouches[0],deviceIsIOS){if((selection=window.getSelection()).rangeCount&&!selection.isCollapsed)return!0;if(!deviceIsIOS4){if(touch.identifier&&touch.identifier===this.lastTouchIdentifier)return event.preventDefault(),!1;this.lastTouchIdentifier=touch.identifier,this.updateScrollParent(targetElement)}}return this.trackingClick=!0,this.trackingClickStart=event.timeStamp,this.targetElement=targetElement,this.touchStartX=touch.pageX,this.touchStartY=touch.pageY,event.timeStamp-this.lastClickTime<this.tapDelay&&event.preventDefault(),!0},FastClick.prototype.touchHasMoved=function(event){var touch=event.changedTouches[0],boundary=this.touchBoundary;return Math.abs(touch.pageX-this.touchStartX)>boundary||Math.abs(touch.pageY-this.touchStartY)>boundary},FastClick.prototype.onTouchMove=function(event){return!this.trackingClick||((this.targetElement!==this.getTargetElementFromEventTarget(event.target)||this.touchHasMoved(event))&&(this.trackingClick=!1,this.targetElement=null),!0)},FastClick.prototype.findControl=function(labelElement){return void 0!==labelElement.control?labelElement.control:labelElement.htmlFor?document.getElementById(labelElement.htmlFor):labelElement.querySelector(\"button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea\")},FastClick.prototype.onTouchEnd=function(event){var forElement,trackingClickStart,targetTagName,scrollParent,touch,targetElement=this.targetElement;if(!this.trackingClick)return!0;if(event.timeStamp-this.lastClickTime<this.tapDelay)return this.cancelNextClick=!0,!0;if(event.timeStamp-this.trackingClickStart>this.tapTimeout)return!0;if(this.cancelNextClick=!1,this.lastClickTime=event.timeStamp,trackingClickStart=this.trackingClickStart,this.trackingClick=!1,this.trackingClickStart=0,deviceIsIOSWithBadTarget&&(touch=event.changedTouches[0],(targetElement=document.elementFromPoint(touch.pageX-window.pageXOffset,touch.pageY-window.pageYOffset)||targetElement).fastClickScrollParent=this.targetElement.fastClickScrollParent),\"label\"===(targetTagName=targetElement.tagName.toLowerCase())){if(forElement=this.findControl(targetElement)){if(this.focus(targetElement),deviceIsAndroid)return!1;targetElement=forElement}}else if(this.needsFocus(targetElement))return event.timeStamp-trackingClickStart>100||deviceIsIOS&&window.top!==window&&\"input\"===targetTagName?(this.targetElement=null,!1):(this.focus(targetElement),this.sendClick(targetElement,event),deviceIsIOS&&\"select\"===targetTagName||(this.targetElement=null,event.preventDefault()),!1);return!(!deviceIsIOS||deviceIsIOS4||!(scrollParent=targetElement.fastClickScrollParent)||scrollParent.fastClickLastScrollTop===scrollParent.scrollTop)||(this.needsClick(targetElement)||(event.preventDefault(),this.sendClick(targetElement,event)),!1)},FastClick.prototype.onTouchCancel=function(){this.trackingClick=!1,this.targetElement=null},FastClick.prototype.onMouse=function(event){return!this.targetElement||(!!event.forwardedTouchEvent||(!event.cancelable||(!(!this.needsClick(this.targetElement)||this.cancelNextClick)||(event.stopImmediatePropagation?event.stopImmediatePropagation():event.propagationStopped=!0,event.stopPropagation(),event.preventDefault(),!1))))},FastClick.prototype.onClick=function(event){var permitted;return this.trackingClick?(this.targetElement=null,this.trackingClick=!1,!0):\"submit\"===event.target.type&&0===event.detail||((permitted=this.onMouse(event))||(this.targetElement=null),permitted)},FastClick.prototype.destroy=function(){var layer=this.layer;deviceIsAndroid&&(layer.removeEventListener(\"mouseover\",this.onMouse,!0),layer.removeEventListener(\"mousedown\",this.onMouse,!0),layer.removeEventListener(\"mouseup\",this.onMouse,!0)),layer.removeEventListener(\"click\",this.onClick,!0),layer.removeEventListener(\"touchstart\",this.onTouchStart,!1),layer.removeEventListener(\"touchmove\",this.onTouchMove,!1),layer.removeEventListener(\"touchend\",this.onTouchEnd,!1),layer.removeEventListener(\"touchcancel\",this.onTouchCancel,!1)},FastClick.notNeeded=function(layer){var metaViewport,chromeVersion,blackberryVersion,firefoxVersion;if(void 0===window.ontouchstart)return!0;if(chromeVersion=+(/Chrome\\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1]){if(!deviceIsAndroid)return!0;if(metaViewport=document.querySelector(\"meta[name=viewport]\")){if(-1!==metaViewport.content.indexOf(\"user-scalable=no\"))return!0;if(chromeVersion>31&&document.documentElement.scrollWidth<=window.outerWidth)return!0}}if(deviceIsBlackBerry10&&(blackberryVersion=navigator.userAgent.match(/Version\\/([0-9]*)\\.([0-9]*)/))[1]>=10&&blackberryVersion[2]>=3&&(metaViewport=document.querySelector(\"meta[name=viewport]\"))){if(-1!==metaViewport.content.indexOf(\"user-scalable=no\"))return!0;if(document.documentElement.scrollWidth<=window.outerWidth)return!0}return\"none\"===layer.style.msTouchAction||\"manipulation\"===layer.style.touchAction||(!!((firefoxVersion=+(/Firefox\\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1])>=27&&(metaViewport=document.querySelector(\"meta[name=viewport]\"))&&(-1!==metaViewport.content.indexOf(\"user-scalable=no\")||document.documentElement.scrollWidth<=window.outerWidth))||(\"none\"===layer.style.touchAction||\"manipulation\"===layer.style.touchAction))},FastClick.attach=function(layer,options){return new FastClick(layer,options)},\"function\"==typeof define&&\"object\"==typeof define.amd&&define.amd?define(function(){return FastClick}):\"undefined\"!=typeof module&&module.exports?(module.exports=FastClick.attach,module.exports.FastClick=FastClick):window.FastClick=FastClick}();"
    ],
    "description": [
      "[H5]fastclick清除click300ms延时",
      "移动端必须要引入",
      "需要配合使用快捷键fastclick"
    ]
  },

  "fastclick插件使用": {
    "prefix": ["fastclick", "csh"],
    "body": [
      "//先引入fastclick.js(新建js输入快捷键fastclick-js)",
      "//fastclick插件使用,在自己的js中第一行使用",
      "//jquery时用",
      "$(function(){FastClick.attach(document.body);});",
      "//原生时用",
      "if ('addEventListener' in document) {",
      "\tdocument.addEventListener('DOMContentLoaded', function() {",
      "\t\tFastClick.attach(document.body);",
      "\t}, false);",
      "}"
    ],
    "description": [
      "fastclick插件使用,在自己的js中第一行使用",
      "需要引入fastclick插件,快捷键fastclick"
    ]
  },

  "轮播图(移动端)": {
    "prefix": ["lbt", "hs", "lunbotu"],
    "body": [
      "/*  HTML格式",
      "\t<div class=\"focus\">",
      "\t<ul>",
      "\t\t<li><img src=\"upload/focus1.jpg\" alt=\"\"></li>",
      "\t\t<li><img src=\"upload/focus2.jpg\" alt=\"\"></li>",
      "\t\t<li><img src=\"upload/focus3.jpg\" alt=\"\"></li>",
      "\t</ul>",
      "\t<!-- 小圆点 -->",
      "\t<ol>",
      "\t\t<li class=\"current\"></li>  current,为单独的小圆圈的样式(选中的)",
      "\t\t<li></li>",
      "\t\t<li></li>",
      "\t</ol>",
      "\t</div> */",
      "// 获取元素 ",
      "var focus = document.querySelector('.focus');",
      "var ul = focus.children[0];",
      "// 获得focus 的宽度",
      "var w = focus.offsetWidth;",
      "var ol = focus.children[1];",
      "//克隆第一张图去最后",
      "var li_clone_first = ul.children[0].cloneNode(true);",
      "ul.appendChild(li_clone_first);",
      "//克隆最后一张图去最前面",
      "var li_clone_last = ul.children[ul.children.length - 1].cloneNode(true);",
      "ul.insertBefore(li_clone_last, ul.children[0]);",
      "// 利用定时器自动轮播图图片",
      "var index = 0;",
      "var indexx = ul.children.length - 2;",
      "var timer = setInterval(function () {",
      "\tindex++;",
      "\tvar translatex = -index * w;",
      "\tul.style.transition = 'all .3s';",
      "\tul.style.transform = 'translateX(' + translatex + 'px)';",
      "}, ${1|2000,3000|});",
      "// 监听过渡完成的事件 transitionend ",
      "ul.addEventListener('transitionend', function () {",
      "\t// 无缝滚动",
      "\tif (index >= indexx) {",
      "\t\tindex = 0;",
      "\t\t// 去掉过渡效果 快速的跳到目标位置",
      "\t\tul.style.transition = 'none';",
      "\t\t// 去滚动图片",
      "\t\tvar translatex = -index * w;",
      "\t\tul.style.transform = 'translateX(' + translatex + 'px)';",
      "\t} else if (index < 0) {",
      "\t\tindex = indexx - 1;",
      "\t\tul.style.transition = 'none';",
      "\t\t// 去滚动图片",
      "\t\tvar translatex = -index * w;",
      "\t\tul.style.transform = 'translateX(' + translatex + 'px)';",
      "\t}",
      "\t// 小圆点跟随变化",
      "\t// 把ol里面li带有current类名的选出来去掉类名 remove",
      "\tol.querySelector('.current').classList.remove('current');",
      "\t// 让当前索引号 的小li 加上 current   add",
      "\tol.children[index].classList.add('current');",
      "});",
      "// 手指滑动轮播图 ",
      "// 获取手指初始坐标",
      "var startX = 0;",
      "var moveX = 0; // 移动距离",
      "var flag = false;",
      "ul.addEventListener('touchstart', function (e) {",
      "\tstartX = e.targetTouches[0].pageX;",
      "\t// 手指触摸的时候就停止定时器",
      "\tclearInterval(timer);",
      "});",
      "// 计算手指的滑动距离， 并且移动盒子",
      "ul.addEventListener('touchmove', function (e) {",
      "\t// 计算移动距离",
      "\tmoveX = e.targetTouches[0].pageX - startX;",
      "\t// 移动盒子：  盒子原来的位置 + 手指移动的距离 ",
      "\tvar translatex = -index * w + moveX;",
      "\t// 手指拖动的时候，取消过渡效果",
      "\tul.style.transition = 'none';",
      "\tul.style.transform = 'translateX(' + translatex + 'px)';",
      "\tflag = true; // 如果用户手指移动过我们再去判断否则不做判断效果",
      "\te.preventDefault(); // 阻止滚动屏幕的行为",
      "});",
      "// 手指离开 根据移动距离去判断是回弹还是播放上一张下一张",
      "ul.addEventListener('touchend', function (e) {",
      "\tif (flag) {",
      "\t\t// 如果移动距离大于50像素我们就播放上一张或者下一张",
      "\t\tif (Math.abs(moveX) > 50) {",
      "\t\t\t// 如果是右滑就是 播放上一张 moveX 是正值",
      "\t\t\tif (moveX > 0) {",
      "\t\t\t\tindex--;",
      "\t\t\t} else {",
      "\t\t\t\t// 如果是左滑就是 播放下一张 moveX 是负值",
      "\t\t\t\tindex++;",
      "\t\t\t}",
      "\t\t\tvar translatex = -index * w;",
      "\t\t\tul.style.transition = 'all .3s';",
      "\t\t\tul.style.transform = 'translateX(' + translatex + 'px)';",
      "\t\t} else {",
      "\t\t\t// 如果移动距离小于50像素我们就回弹",
      "\t\t\tvar translatex = -index * w;",
      "\t\t\tul.style.transition = 'all .1s';",
      "\t\t\tul.style.transform = 'translateX(' + translatex + 'px)';",
      "\t\t}",
      "\t}",
      "\t// 手指离开的时候就重新开启定时器",
      "\tclearInterval(timer);",
      "\ttimer = setInterval(function () {",
      "\t\tindex++;",
      "\t\tvar translatex = -index * w;",
      "\t\tul.style.transition = 'all .3s';",
      "\t\tul.style.transform = 'translateX(' + translatex + 'px)';",
      "\t}, ${1|2000,3000|});",
      "});"
    ],
    "description": ["轮播图(移动端)"]
  },

  "返回顶部函数": {
    "prefix": ["goback", "fanhui", "hs"],
    "body": [
      "// 返回顶部模块制作",
      "var goBack = document.querySelector('${1:需要制作返回顶部(隐藏显示的盒子)}');",
      "var nav = document.querySelector('${2:到哪个模块显示返回顶部的按钮}');",
      "window.addEventListener('scroll', function () {",
      "\tif (window.pageYOffset >= nav.offsetTop) {",
      "\t\tgoBack.style.display = 'block';",
      "\t} else {",
      "\t\tgoBack.style.display = 'none';",
      "\t}",
      "});",
      "goBack.addEventListener('click', function () {",
      "\twindow.scroll(0, 0);",
      "})"
    ],
    "description": ["返回顶部函数"]
  },

  "鼠标样式": {
    "prefix": ["curson"],
    "body": ["\"curson\",\"${1|not-allowed,pointer,default|}\""],
    "description": ["鼠标样式", "not-allowed禁止", "pointer小手", "default默认"]
  },

  "jQuery电梯导航": {
    "prefix": ["zj-nav"],
    "body": [
      "//页面打开调用判断是否显示电梯导航",
      "getTool();",
      "//判断显示隐藏电梯导航  函数",
      "function getTool(){",
      "\tif ($(document).scrollTop() >= $(\"${3:楼层区}\").offset().top) {",
      "\t\t$(\"${1:电梯导航大盒子}\").fadeIn();",
      "\t} else {",
      "\t\t$(\"${1:电梯导航大盒子}\").fadeOut();",
      "\t}",
      "\t//电梯导航切换样式",
      "\t$(\"${4:楼层区(楼层区必须添加个相同类名)[例.floor .w]}\").each(function(i,ele){",
      "\t\tif($(document).scrollTop() >= $(ele).offset().top){",
      "\t\t\t$(\"${1:电梯导航大盒子}\").find(\"${2:电梯导航中的小盒子}\").removeClass(\"${5:选中楼层的样式}\").eq(i).addClass(\"${5:选中楼层的样式}\")",
      "\t\t}",
      "\t})",
      "}",
      "$(window).scroll(function () {",
      "\tgetTool();",
      "})",
      "//电梯导航操作",
      "$(\"${1:电梯导航大盒子}\").on(\"click\",\"${2:电梯导航中的小盒子}\",function(){",
      "\tvar goto = $(\"${4:楼层区(楼层区必须添加个相同类名)[例.floor .w]}\").eq($(this).index()).offset().top;",
      "\t$(\"html, body\").animate({",
      "\t\tscrollTop:goto",
      "\t})",
      "})"
    ],
    "description": ["jQuery电梯导航"]
  },

  "jQuery下拉导航栏": {
    "prefix": ["zj-nav"],
    "body": [
      "<!-- 下拉导航栏 -->",
      "<ul class=\"slide_nav\">",
      "\t<li>",
      "\t\t<!-- 导航栏标题 -->",
      "\t\t<a href=\"javascript:;\">不隐藏的标题</a>",
      "\t\t<!-- 隐藏部分 -->",
      "\t\t<ul style=\"display:none\">",
      "\t\t\t<!-- 手动添加display=none -->",
      "\t\t\t<li><a href=\"javascript:;\">隐藏value1</a></li>",
      "\t\t\t<li><a href=\"javascript:;\">隐藏value2</a></li>",
      "\t\t\t<li><a href=\"javascript:;\">隐藏value3</a></li>",
      "\t\t\t<li><a href=\"javascript:;\">隐藏value4</a></li>",
      "\t\t</ul>",
      "\t</li>",
      "</ul>",
      "<script>",
      "\t$(\".slide_nav\").on({",
      "\t\tmouseover: function (e) {",
      "\t\t\t$(e.target).parents(\"li\").children(\"ul\").stop().slideDown();",
      "\t\t},",
      "\t\tmouseout: function (e) {",
      "\t\t\t$(e.target).parents(\"li\").children(\"ul\").stop().slideUp();",
      "\t\t}",
      "\t})",
      "</script>"
    ],
    "description": ["下拉导航栏"]
  },

  "prop获取元素固定属性": {
    "prefix": ["prop"],
    "body": ["prop()"],
    "description": ["prop获取元素固定属性"]
  },

  "attr获取元素自定义属性": {
    "prefix": ["attr"],
    "body": ["attr()"],
    "description": ["获取元素自定义属性"]
  },

  "keyCode返回ASSCII码": {
    "prefix": ["keycode"],
    "body": ["keyCode()"],
    "description": ["keyCode返回ASSIC"]
  },
  "instanceof判断对象是否是某个构造函数的对象": {
    "prefix": ["instanceof", "is"],
    "body": ["${1:obj} instanceof ${2:Object}"],
    "description": [
      "instanceof判断对象是否是某个构造函数的对象",
      "arr instanceof Array arr是不是Array构造的对象,返回布尔"
    ]
  },
  "prototype原型对象": {
    "prefix": ["prototype", "yx", "yuanxing"],
    "body": ["prototype"],
    "description": [
      "prototype原型对象",
      "创建原型对象方法:",
      "构造函数.prototype.需要创建的原型对象方法 = function (){}"
    ]
  },

  "constructor指向当前实例的构造函数": {
    "prefix": ["constructor", "dx"],
    "body": ["constructor"],
    "description": ["constructor指向当前实例的构造函数"]
  },

  "自调用函数": {
    "prefix": ["!"],
    "body": [";(function(window,undefined){", "\t$0", "}(window,undefined))"],
    "description": ["自调用函数"]
  },

  "call()改变this指向": {
    "prefix": ["changethis", "call"],
    "body": [
      "//函数内改变this作用域",
      "${1:谁里面的this}.call(${2:this},${3:(若有参数需要传入用逗号隔开)})",
      "//外部调用函数,改变this作用域",
      "${1:谁里面的this}.call(${2:需要改变的this的作用域},${3:(若有参数需要传入用逗号隔开)})"
    ],
    "description": [
      "改变this指向",
      "例如Array.prototype.push.call(obj, 100);",
      "数组原型中的this指向obj,给obj用这个数组方法",
      "如果第一个参数指定了 null 或者 undefined 则内部 this 指向 window"
    ]
  },

  "apply改变this指向": {
    "prefix": ["changethis", "apply"],
    "body": [
      "//函数内改变this作用域",
      "${1:谁里面的this}.apply(${2:this},${3:(若有参数需要传入用逗号隔开)})",
      "//外部调用函数,改变this作用域",
      "${1:谁里面的this}.apply(${2:需要改变的this的作用域},${3:(若有参数需要传入用逗号隔开)})"
    ],
    "description": [
      "改变this指向",
      "例如Array.prototype.push.apply(obj, [100]);",
      "数组原型中的this指向obj,给obj用这个数组方法",
      "如果第一个参数指定了 null 或者 undefined 则内部 this 指向 window"
    ]
  },
  "原型继承": {
    "prefix": ["yxjc", "get"],
    "body": [
      "${1:Chlidren}.prototype = new ${2:Parent}();",
      "${1:Chlidren}.prototype.constructor = ${1:Chlidren};"
    ],
    "description": ["原型继承"]
  },
  "图片即时预览": {
    "prefix": ["yl", "zj"],
    "body": [
      "//图片即时预览",
      "var file = document.querySelector('#file');//input 传入的图片文件 ",
      "var picDisplay = document.querySelector('#picDisplay'); //需要显示图片的位置",
      "function instantPreview(file,picDisplay) {",
      "\tvar img = file.files[0];",
      "\t//创建读取器",
      "\tvar a = new FileReader();",
      "\ta.readAsDataURL(img);",
      "\ta.onload = () => picDisplay.src = a.result;",
      "}",
      "file.addEventListener('change', function () {",
      "\tinstantPreview(file,picDisplay);",
      "});"
    ],
    "description": ["图片即时预览"]
  },
  "状态码": {
    "prefix": ["ztm", "zhuangtaima"],
    "body": [
      "100——客户必须继续发出请求",
      "101——客户要求服务器根据请求转换HTTP协议版本",
      "200——交易成功",
      "201——提示知道新文件的URL",
      "202——接受和处理、但处理未完成",
      "203——返回信息不确定或不完整",
      "204——请求收到，但返回信息为空",
      "205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件",
      "206——服务器已经完成了部分用户的GET请求",
      "300——请求的资源可在多处得到",
      "301——删除请求数据",
      "302——在其他地址发现了请求数据",
      "303——建议客户访问其他URL或访问方式",
      "304——客户端已经执行了GET，但文件未变化",
      "305——请求的资源必须从服务器指定的地址得到",
      "306——前一版本HTTP中使用的代码，现行版本中不再使用",
      "307——申明请求的资源临时性删除",
      "400——错误请求，如语法错误（后台问题，找后台）",
      "401——请求授权失败",
      "402——保留有效ChargeTo头响应",
      "403——请求不允许",
      "404——没有发现文件、查询或URl",
      "405——用户在Request-Line字段定义的方法不允许",
      "406——根据用户发送的Accept拖，请求资源不可访问",
      "407——类似401，用户必须首先在代理服务器上得到授权",
      "408——客户端没有在用户指定的时间内完成请求",
      "409——对当前资源状态，请求不能完成",
      "410——服务器上不再有此资源且无进一步的参考地址",
      "411——服务器拒绝用户定义的Content-Length属性请求",
      "412——一个或多个请求头字段在当前请求中错误",
      "413——请求的资源大于服务器允许的大小",
      "414——请求的资源URL长于服务器允许的长度",
      "415——请求资源不支持请求项目格式",
      "416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段",
      "417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求",
      "500——服务器产生内部错误",
      "501——服务器不支持请求的函数",
      "502——服务器暂时不可用，有时是为了防止发生系统过载",
      "503——服务器过载或暂停维修",
      "504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长",
      "505——服务器不支持或拒绝支请求头中指定的HTTP版本"
    ],
    "description": ["状态码", "404-找不到文件", "400-后台有问题"]
  },
  "(创建异步对象)0.构造对象实例": {
    "prefix": ["new", "create", "ajax"],
    "body": ["var xhr = new XMLHttpRequest();"],
    "description": ["创建异步对象"]
  },
  "(创建异步对象)1.设置请求行": {
    "prefix": ["open", "set", "create", "ajax"],
    "body": ["//设置请求行", "xhr.open(${1:请求方式},${2:请求url})"],
    "description": [
      "(创建异步对象)1.设置请求行",
      "get需要在url后面拼接参数(如果有参数)",
      "post请求不需要拼接参数"
    ]
  },
  "(创建异步对象)2.设置请求头": {
    "prefix": ["set", "setRequestHeader", "create", "ajax"],
    "body": [
      "//设置请求头(POST)",
      "xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");"
    ],
    "description": [
      "(创建异步对象)2.设置请求头",
      "如果没有设置，参数无法正确的传递到服务器(本质上说，如果没有参数，也不一定需要设置，不会影响请求的发送)"
    ]
  },
  "(创建异步对象)3.设置请求体": {
    "prefix": ["send", "set", "create", "ajax"],
    "body": [
      "//设置请求体",
      "xhr.send(${1|get为null,post为参数：key=value&key=value|})"
    ],
    "description": [
      "(创建异步对象)3.设置请求体",
      "get的参数在url拼接了，所以不需要在这个函数中设置",
      "post的参数在这个函数中设置(如果有参数)"
    ]
  },
  "监听异步对象的响应状态": {
    "prefix": ["listen", "ajax", "readyState", "get"],
    "body": [
      "//readyState=4：响应的内容解析完毕，可以在客户端使用了--完成",
      "readyState"
    ],
    "description": [
      "监听异步对象的响应状态",
      "readyState=0:已经创建了异步对象，但是还没有调用open方法 -- 未初始化",
      "readyState=1：说明已经调用了open方法，初始化完成 --载入",
      "readyState=2：send方法执行完毕，请求发送--载入完成",
      "readyState =3：正在接收响应数据 -- 交互",
      "readyState=4：响应的内容解析完毕，可以在客户端使用了--完成"
    ]
  },
  "获取当前服务器的响应状态": {
    "prefix": ["status", "get", "ajax", "listen"],
    "body": ["//xhr.status:获取当前服务器的响应状态  200=>成功", "status"],
    "description": [
      "获取当前服务器的响应状态",
      "xhr.status:可以获取当前服务器的响应状态  200=>成功"
    ]
  },
  "判断服务器成功响应且数据解析完成": {
    "prefix": ["is", "ajax"],
    "body": [
      "// 服务器成功响应         数据解析完毕可以使用了",
      "if(xhr.status == 200 && xhr.readyState == 4){",
      "\t${0:响应成功后执行的内容}",
      "}"
    ],
    "description": ["判断服务器成功响应且数据解析完成"]
  },
  "异步对象发送GET请求": {
    "prefix": ["ajax", "XMLHttpRequest", "xhr"],
    "body": [
      "//获取用户数据",
      "$1",
      "//创建异步对象",
      "var xhr = new XMLHttpRequest();",
      "//设置请求行open()",
      "xhr.open(\"get\",\"${2:URL以及需要传递的参数数据}\");",
      "//发送请求",
      "xhr.send(null);"
    ],
    "description": ["异步对象发送GET请求"]
  },
  "函数-onreadystatechange 事件(status发生变化)": {
    "prefix": ["ajax", "hs"],
    "body": [
      "xhr.onreadystatechange = function(){",
      "\t// 服务器成功响应         数据解析完毕可以使用了",
      "\tif(xhr.status == 200 && xhr.readyState == 4){",
      "\t\t${1:成功的响应后需要执行的事}",
      "\t}",
      "}"
    ],
    "description": [
      "函数-服务器发生相应变化",
      "每当 readyState 改变时，就会触发 onreadystatechange 事件",
      "服务器成功响应且数据解析完毕可以使用"
    ]
  },
  "服务器返回值": {
    "prefix": ["res", "ajax"],
    "body": ["responseText"],
    "description": ["服务器返回值"]
  },
  "result": {
    "prefix": ["result"],
    "body": ["result"],
    "description": ["result"]
  },
  "response": {
    "prefix": ["response"],
    "body": ["response"],
    "description": ["response"]
  },
  "(es6)是否能找到了参数字符串": {
    "prefix": ["str-includes"],
    "body": ["includes()"],
    "description": [
      "(es6)是否能找到了参数字符串",
      "'hi,nihao'.includes('n') //true"
    ]
  },
  "(es6)字符串是否在原字符串的头部": {
    "prefix": ["str-startsWith"],
    "body": ["startsWith()"],
    "description": [
      "(es6)字符串是否在原字符串的头部",
      "'hi,nihao'.startsWith('h') //true"
    ]
  },
  "(es6)字符串是否在原字符串的尾部": {
    "prefix": ["str-endsWith"],
    "body": ["endsWith()"],
    "description": [
      "(es6)字符串是否在原字符串的尾部",
      "'hi,nihao'.endsWith('o') //true"
    ]
  },
  "(es6)将原字符串重复n次": {
    "prefix": ["str-repeat"],
    "body": ["repeat(${1:N})"],
    "description": ["(es6)将原字符串重复n次"]
  },
  "去除一个数的小数部分(返回整数)": {
    "prefix": ["math"],
    "body": ["Math.trunc()"],
    "description": ["去除一个数的小数部分(返回整数)"]
  },
  "判断一个数到底是正数、负数、还是零": {
    "prefix": ["math"],
    "body": ["Math.sign()"],
    "description": [
      "判断一个数到底是正数、负数、还是零",
      "参数为正数，返回+1",
      "参数为负数，返回-1",
      "参数为 0，返回 0",
      "参数为-0，返回-0",
      "其他值，返回NaN"
    ]
  },
  "立方根": {
    "prefix": ["math"],
    "body": ["Math.cbrt()"],
    "description": ["立方根"]
  },
  "平方和的平方根": {
    "prefix": ["math"],
    "body": ["Math.hypot()"],
    "description": ["平方和的平方根。"]
  },
  "一个数的N次方": {
    "prefix": ["math"],
    "body": ["Math.pow(${1:2,3})"],
    "description": ["一个数的N次方"]
  },
  "四舍五入": {
    "prefix": ["math"],
    "body": ["Math.round()"],
    "description": ["四舍五入"]
  },
  "向上取整": {
    "prefix": ["math"],
    "body": ["Math.ceil()"],
    "description": ["向上取整"]
  },
  "向下取整": {
    "prefix": ["math"],
    "body": ["Math.floor()"],
    "description": ["向下取整"]
  },
  "随机数": {
    "prefix": ["math"],
    "body": ["Math.random()"],
    "description": ["随机数"]
  },
  "字符串补全(从前补全)": {
    "prefix": ["padStart"],
    "body": ["padStart(${1:几个字符},'${2:不足用什么补全}')"],
    "description": ["字符串补全(从前补全)"]
  },
  "字符串补全(从后补全)": {
    "prefix": ["padEnd"],
    "body": ["padEnd(${1:几个字符},'${2:不足用什么补全}')"],
    "description": ["字符串补全(从前补全)"]
  },
  "解析字符串并计算": {
    "prefix": ["get", "eval"],
    "body": [
      "eval(${1:要计算的字符串，其中含有要计算的 js 表达式或要执行的语句})"
    ],
    "description": ["解析字符串并计算"]
  },
  "返回前一页并且刷新": {
    "prefix": ["location"],
    "body": ["location.replace(document.referrer); //返回上一页且刷新"],
    "description": ["返回前一页并且刷新"]
  },
  "JSON转字符串(存)": {
    "prefix": ["json"],
    "body": ["JSON.stringify($1)"],
    "description": ["转成JSON格式字符串(存)"]
  },
  "字符串转JSON(取)": {
    "prefix": ["json"],
    "body": ["JSON.parse($1)"],
    "description": ["转成JSON格式字符串(存)"]
  },
  "(es6)some循环,找对(找到返回true停止循环)": {
    "prefix": ["for-some"],
    "body": [
      "${1:arr}.some((${2:item}${3:[,index,arr]})=>{",
      "\nif($0) return true;",
      "})"
    ],
    "description": [
      "(es6)some循环,找对(找到返回true停止循环)",
      "不改变原数组的值"
    ]
  },
  "(es6)map遍历数组，返回一个新数组": {
    "prefix": ["for-map"],
    "body": ["${1:arr}.map((${2:item}${3:[,index,arr]})=>{$0})"],
    "description": ["(es6)map遍历数组，返回一个新数组", "不改变原数组的值"]
  },
  "(es6)filter过滤掉数组中不满足条件的值，返回一个新数组": {
    "prefix": ["for-filter"],
    "body": ["${1:arr}.filter((${2:item}${3:[,index,arr]})=>{$0})"],
    "description": [
      "(es6)filter过滤掉数组中不满足条件的值，返回一个新数组",
      "不改变原数组的值"
    ]
  },
  "(es6)reduce进行某种计算。然后返回其值，并继续计算": {
    "prefix": ["for-reduce"],
    "body": [
      "${1:arr}.reduce((${2:prev}${3:[,cur,index,arr]})=>{$0}${4:[,初始值]})"
    ],
    "description": [
      "(es6)reduce遍历进行某种计算。然后返回其值，并继续计算",
      "不改变原数组，返回计算的最终结果,从第二项开始计算",
      "prev为计算结果",
      "cur为当前项"
    ]
  },
  "(es6)every,找错(找到返回true停止循环)": {
    "prefix": ["for-every"],
    "body": ["${1:arr}.every((${2:item}${3:[,index,arr]})=>{$0})"],
    "description": [
      "(es6)every遍历数组每一项，每一项返回true,则最终结果为true。当任何一项返回false时，停止遍历，返回false。不改变原数组",
      "不改变原数组的值"
    ]
  },
  "(es6)findIndex查找索引": {
    "prefix": ["for-findIndex"],
    "body": [
      "${1:arr}.findIndex((${2:item})=>{",
      "\nif($0) return true;",
      "})"
    ],
    "description": ["(es6)findIndex查找索引"]
  },

  "(ES6)anonymousFunction": {
    "prefix": "anfn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "(ES6)创建匿名箭头函数"
  },
  "(ES6)namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "(ES6)创建命名箭头函数"
  },
  "(ES6)destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
    "description": "(ES6)对象解构"
  },
  "(ES6)destructingArray": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
    "description": "(ES6)数组解构"
  },
  "(ES6)promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
    "description": "(ES6)创建并返回新的Promise"
  },
  "(ES6)命名promise": {
    "prefix": "anprom",
    "body": [
      "const p = new Promise((resolve, reject) => {",
      "  //  成功时回调resolve() , 失败时回调reject()",
      "\t\t${0:代码块}",
      "})"
    ],
    "description": "(ES6)创建命名promise"
  },
  "(ES6)thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
    "description": "(ES6)添加.then和.catch方法来处理promises"
  },

  "(ES6)consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object});",
    "description": "(ES6)如果指定的表达式为false，则将消息与堆栈跟踪一起写入控制台"
  },

  "(ES7)fetch发送ajax-get": {
    "prefix": ["fetch-get/delete"],
    "body": [
      "fetch('${1:/books}',{method:'${2|get,delete|}'}).then((response) => {",
      "    return response.${3|json,text|}()",
      "}).then((result) => {",
      "    console.log(result);",
      "})"
    ],
    "description": ["(ES7)fetch发送ajax-get/delete"]
  },

  "(ES7)fetch发送ajax-post": {
    "prefix": ["fetch-post/put"],
    "body": [
      "fetch('${1:/books/123}', {",
      "  method: '${2|post,put|}',",
      "  body: JSON.stringify({uname: '张三',pwd: '789'}),",
      "  headers: {'Content-Type': 'application/json'}",
      "}).then(function(data){",
      "    return data.text();",
      "}).then(function(data){",
      "    console.log(data)",
      "});"
    ],
    "description": ["(ES7)fetch发送ajax-post/put"]
  },

  "(ES6)async": {
    "prefix": ["async"],
    "body": ["async"],
    "description": ["async", "juest a word"]
  },

  "(ES6)await": {
    "prefix": ["await"],
    "body": ["await"],
    "description": ["await", "juest a word"]
  },

  "(ES6)export default向外暴露成员": {
    "prefix": ["export-default"],
    "body": ["export default {$0}"],
    "description": ["(ES6)export default向外暴露成员"]
  },
  "(ES6)import ... from ...导入模块": {
    "prefix": "import",
    "body": ["import ${1:自定义模块名称} from '${2:模块标识符}'"],
    "description": "(ES6)import ... from ...导入模块"
  },
  "(ES6)import 导入样式": {
    "prefix": "import",
    "body": ["import '${1:路径}'"],
    "description": "(ES6)import 导入样式"
  }
}
