{
  "react": {
    "prefix": ["!-React"],
    "body": [
      "import React, { Component, Fragment } from 'react'",
      "",
      "class ${1:Demo} extends Component {",
      "  constructor(props) {",
      "    super(props)",
      "    this.state = {}",
      "  }",
      "  render () {",
      "    return (<Fragment>",
      "      ${0}",
      "    </Fragment>)",
      "  }",
      "}",
      "",
      "export default ${1:Demo}"
    ],
    "description": ["基础模板"]
  },
  "react子组件基础模板": {
    "prefix": ["!-React"],
    "body": [
      "import React, { Component, Finally } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "class ${1:App} extends Component {",
      "  render() {",
      "    return <Finally>{this.props.num}</Finally>",
      "  }",
      "}",
      "",
      "${1:App}.prototype = {",
      "  num: PropTypes.number",
      "}",
      "${1:App}.defaultProps = {",
      "  num: 10",
      "}",
      "export default ${1:App}"
    ],
    "description": ["react子组件基础模板"]
  },
  "this.setState": {
    "prefix": ["this.setState"],
    "body": [
      "this.setState((state,props)=>{",
      "    return{",
      "        ${2:count:state.count+1}",
      "    }",
      "}${1:,callback})"
    ],
    "description": ["this.setState"]
  },
  "handleChange": {
    "prefix": ["handleChange"],
    "body": [
      "handleChange = e => {",
      "  this.setState({ num: e.target.value })",
      "}"
    ],
    "description": ["handleChange", "表单快速双向绑定"]
  },
  "handleChange(一对多)": {
    "prefix": ["handleChange"],
    "body": [
      "handleChange = e => {",
      "  const target = e.target",
      "  const value = target.type === 'checkbox' ? target.checked : target.value",
      "  const name = target.name // 表单元素必须含有name且与state保持一致",
      "  this.setState({",
      "    [name]: value",
      "  })",
      "}"
    ],
    "description": [
      "handleChange(一对多)",
      "表单元素必须含有name",
      "表单快速双向绑定"
    ]
  },
  "ref": {
    "prefix": ["ref"],
    "body": ["this.txtRef = React.createRef()"],
    "description": [
      "ref非受控组件(直接操作DOM)",
      "在constructor中声明",
      "DOM直接ref={this.txtRef}"
    ]
  },
  "Fragment": {
    "prefix": ["Fragment"],
    "body": ["<Fragment>$0</Fragment>"],
    "description": ["Fragment占位符"]
  },
  "EventEmitter(自定义事件通信new)": {
    "prefix": ["tx-event-newEventEmitter"],
    "body": [
      "import { EventEmitter } from 'events'",
      "export default new EventEmitter()"
    ],
    "description": ["EventEmitter(自定义事件通信)", "新建events.js"]
  },
  "EventEmitter(自定义通信触发)": {
    "prefix": ["tx-event-emit"],
    "body": ["emitter.emit('${1:自定义事件名}')"],
    "description": ["EventEmitter(自定义通信触发)"]
  },
  "EventEmitter(自定义通信监听)": {
    "prefix": ["tx-event-addListener"],
    "body": [
      "// 写在constructor中",
      "emitter.addListener('${1:自定义事件名}',()=>{$0}"
    ],
    "description": ["EventEmitter(自定义通信监听)"]
  },
  "createContext(跨级组件通信)": {
    "prefix": ["tx-createContext"],
    "body": ["const { Provider, Consumer } = React.createContext()"],
    "description": ["createContext(跨级组件通信)"]
  },
  "Provider(跨级通信传递)": {
    "prefix": ["tx-Provider"],
    "body": ["<Provider value={${1:传递内容}}>${0}</Provider>"],
    "description": ["Provider(跨级通信传递)"]
  },
  "Consumer(跨级通信接收)": {
    "prefix": ["tx-Consumer"],
    "body": [
      "<Consumer>{ data => <span> 我是子节点:{data}</span> }</Consumer>"
    ],
    "description": ["Consumer(跨级通信接收)"]
  },
  "constructor": {
    "prefix": ["sm-constructor"],
    "body": ["constructor(props){", " super(props)", "}"],
    "description": ["constructor(挂载阶段生命周期)"]
  },
  "render": {
    "prefix": ["sm-render"],
    "body": [
      "render() {",
      "  return (",
      "    <${1|div,Fragment|}>",
      "      $0",
      "    </${1|div,Fragment|}>",
      "  )",
      "}"
    ],
    "description": ["render(挂载阶段/更新阶段生命周期)"]
  },
  "componentDidMount": {
    "prefix": ["sm-componentDidMount"],
    "body": ["componentDidMount(){$0}"],
    "description": ["componentDidMount(挂载阶段生命周期)", "一般发请求"]
  },
  "componentDidUpdata": {
    "prefix": ["sm-componentDidUpdate"],
    "body": [
      "componentDidUpdate (prevProps) {",
      "  // 如果使用 setState() 必须加 if 判断",
      "  // if(prevProps.data !== this.props.data) {",
      "  //   this.setState({})",
      "  // }",
      "}"
    ],
    "description": [
      "componentDidUpdata(更新阶段生命周期)",
      "组件更新(DOM渲染后)",
      "一般发请求/DOM操作"
    ]
  },
  "componentWillUnmount": {
    "prefix": ["sm-componentWillUnmount"],
    "body": ["componentWillUnmount(){$0}"],
    "description": [
      "componentWillUnmount(卸载阶段生命周期)",
      "一般清理第三方插件或定时器"
    ]
  },
  "shouldComponentUpdate": {
    "prefix": ["sm-shouldComponentUpdate"],
    "body": ["shouldComponentUpdate(nextProps, nextState){$0}"],
    "description": [
      "shouldComponentUpdate(更新阶段生命周期)",
      "是否更新render()",
      "默认return true"
    ]
  },
  "高阶组件": {
    "prefix": ["!-react-HOC-demo"],
    "body": [
      "import React, { Component } from 'react'\n",
      "// 创建高阶组件",
      "function withMouse(WrappendComponent) {",
      "  class Mouse extends Component {",
      "    state = {",
      "      x: 0,",
      "      y: 0",
      "    }",
      "    handleMouseMove = e => {",
      "      this.setState({ x: e.clientX, y: e.clientY })",
      "    }",
      "    componentDidMount() {",
      "      window.addEventListener('mousemove', this.handleMouseMove)",
      "    }",
      "    componentWillUnmount() {",
      "      window.removeEventListener('mousemove', this.handleMouseMove)",
      "    }",
      "    render() {",
      "      return (",
      "        <WrappendComponent {...this.state} {...this.props}></WrappendComponent>",
      "      )",
      "    }",
      "  }",
      "  return Mouse",
      "}",
      "export default withMouse"
    ],
    "description": ["高阶组件(获取鼠标位置)"]
  },
  "高阶组件模板": {
    "prefix": ["!-react-HOC"],
    "body": [
      "import React, { Component } from 'react'\n",
      "function with${1:App}(props) {",
      "  return function(WrappendComponent) {",
      "    return class extends Component {",
      "      state = {}",
      "      componentDidMount() {}",
      "      componentWillUnmount() {}",
      "      render() {",
      "        return (",
      "          <WrappendComponent {...this.state} {...this.props}></WrappendComponent>",
      "        )",
      "      }",
      "    }",
      "  }",
      "}",
      "export default with${1:App}"
    ],
    "description": [
      "高阶组件模板",
      "调用const Page = withApp(props)(WrappendComponent)"
    ]
  },
  "引入 react-router": {
    "prefix": ["route"],
    "body": [
      "import { BrowserRouter as Router, Route, Link } from 'react-router-dom'"
    ],
    "description": ["引入 react-router"]
  },
  "链接": {
    "prefix": ["route-link"],
    "body": ["<Link to='${1:/home/1}'>${2:首页}</Link>"],
    "description": ["链接"]
  },
  "路由容器": {
    "prefix": ["route"],
    "body": [
      "<Route path='${1:home/:id}' exact component={${2:展示的内容}}></Route>"
    ],
    "description": ["路由容器", "exact精准匹配模式"]
  },
  "嵌套路由容器": {
    "prefix": ["route"],
    "body": [
      "<Route",
      "  path='${1:第一层路径}'",
      "  render={() => (",
      "    <${1:Content}>",
      "      <Route path='${2:第一层路径默认展示组件}' exact component={${4:组件}}></Route>",
      "      <Route path='${3:/content/:itemid}' component={${4:组件}}></Route>",
      "    </${1:Content}>",
      "  )}",
      "></Route>"
    ],
    "description": ["嵌套路由容器"]
  },
  "接收路由参数": {
    "prefix": ["route-params"],
    "body": ["this.props.match.params.${1:id}"],
    "description": ["接收路由参数"]
  },
  "编程式导航": {
    "prefix": ["route-push"],
    "body": ["this.props.history.push('${1:/login}')"],
    "description": ["编程式导航"]
  },
  "Switch组件(只匹配第一个路由规则)": {
    "prefix": ["route-Switch"],
    "body": ["<Switch>${0}<Switch>"],
    "description": ["Switch组件", "只匹配第一个路由规则"]
  },
  "Redirect重定向": {
    "prefix": ["route-redirect"],
    "body": [
      "<Redirect to={{ pathname: '${1:路径}', search: '${2:参数}' }}></Redirect>"
    ],
    "description": ["Redirect重定向"]
  },
  "StateHook(类似constructor)": {
    "prefix": ["hook-useState"],
    "body": ["const [${1:count},${2:setCount}] = useState(${3:默认值})"],
    "description": ["StateHook(类似constructor)"]
  },
  "EffectHook": {
    "prefix": ["hook-useEffect"],
    "body": [
      "useEffect(()=>{",
      "  ${1}",
      "},[${2:判断更新内容是否相同需要更新，为空表示只在第一次渲染使用Effect}])"
    ],
    "description": ["EffectHook(类似componentDidMount+componentDidUpdata)"]
  },
  "ContextHook": {
    "prefix": ["hook-useContext"],
    "body": ["useContext(${1:.Provider组件})"],
    "description": ["ContextHook", "Provider,Consumer中代替Consumer"]
  },
  "MemoHook": {
    "prefix": ["hook-useMemo"],
    "body": ["useMemo(() => {$0}, [${1:检查内容}])"],
    "description": ["MemoHook"]
  },
  "ReducerHook": {
    "prefix": ["hook-useReducer"],
    "body": ["const [state, dispatch] = useReducer(reducer, initState)"],
    "description": ["ReducerHook"]
  },
  "reducer": {
    "prefix": ["reducer"],
    "body": [
      "function reducer(state, action) {",
      "  switch (action.type) {",
      "    case 'Add':",
      "      return { count: state.count + 1 }",
      "    case 'Sub':",
      "      return { count: state.count - 1 }",
      "    default:",
      "      throw new Error()",
      "  }",
      "}"
    ],
    "description": ["reducer"]
  },
  "配置别名，对引用路径进行隐射": {
    "prefix": ["umirc-alias"],
    "body": ["alias: {", "  'foo': '/tmp/a/b/foo'", "}"],
    "description": ["配置别名，对引用路径进行隐射"]
  },
  "包模块结构分析工具": {
    "prefix": ["umirc-analyze"],
    "body": [
      "// 配置具体含义见：https://github.com/umijs/umi-webpack-bundle-analyzer#options-for-plugin",
      "analyze: {",
      "  analyzerMode: 'server',",
      "  analyzerPort: 8888,",
      "  openAnalyzer: true,",
      "  // generate stats file while ANALYZE_DUMP exist",
      "  generateStatsFile: false,",
      "  statsFilename: 'stats.json',",
      "  logLevel: 'info',",
      "  defaultSizes: 'parsed', // stat  // gzip",
      "}"
    ],
    "description": [
      "包模块结构分析工具",
      "通过 ANALYZE=1 umi build 或 ANALYZE=1 umi dev 开启"
    ]
  },
  "设置路由前缀，通常用于部署到非根目录": {
    "prefix": ["umirc-base"],
    "body": ["base: '/'"],
    "description": ["设置路由前缀，通常用于部署到非根目录"]
  },
  "设置要复制到输出目录的文件或文件夹": {
    "prefix": ["umirc-copy"],
    "body": ["copy: [", "    'foo.js',", "    'bar',", "  ]"],
    "description": ["设置要复制到输出目录的文件或文件夹"]
  },
  "设置哪些模块可以不被打包，通过 <script> 或其他方式引入": {
    "prefix": ["umirc-externals"],
    "body": [
      "externals: {",
      "  react: 'window.React',",
      "},",
      "scripts: [",
      "  'https://unpkg.com/browse/react@16.12.0/umd/react.production.min.js',",
      "]"
    ],
    "description": ["设置哪些模块可以不被打包，通过 <script> 或其他方式引入"]
  },
  "配置额外的 babel 插件": {
    "prefix": ["umirc-extraBabelPlugins"],
    "body": ["extraBabelPlugins: [", "  'babel-plugin-react-require',", "]"],
    "description": ["配置额外的 babel 插件"]
  },
  "配置额外的 babel 插件集": {
    "prefix": ["umirc-extraBabelPresets"],
    "body": ["extraBabelPresets: []"],
    "description": ["配置额外的 babel 插件集"]
  },
  "配置额外的 postcss 插件": {
    "prefix": ["umirc-extraPostCSSPlugins"],
    "body": ["extraPostCSSPlugins: []"],
    "description": ["配置额外的 postcss 插件"]
  },
  "配置 favicon 地址（href 属性）": {
    "prefix": ["umirc-favicon"],
    "body": ["favicon: '/assets/favicon.ico'"],
    "description": [
      "配置 favicon 地址（href 属性）",
      "如果要使用本地的图片，图片请放到 public 目录"
    ]
  },
  "配置是否让生成的文件包含 hash 后缀": {
    "prefix": ["umirc-hash"],
    "body": ["hash: true"],
    "description": [
      "配置是否让生成的文件包含 hash 后缀",
      "通常用于增量发布和避免浏览器加载缓存"
    ]
  },
  "配置图片文件是否走 base64 编译的阈值": {
    "prefix": ["umirc-inlineLimit"],
    "body": ["inlineLimit: 10000"],
    "description": ["配置图片文件是否走 base64 编译的阈值"]
  },
  "配置额外的 link 标签": {
    "prefix": ["umirc-links"],
    "body": ["links: []"],
    "description": ["配置额外的 link 标签"]
  },
  "设置 less-loader 配置项": {
    "prefix": ["umirc-lessLoader"],
    "body": ["lessLoader: []"],
    "description": ["设置 less-loader 配置项"]
  },
  "配置额外的 meta 标签": {
    "prefix": ["umirc-metas"],
    "body": ["metas: []"],
    "description": ["配置额外的 meta 标签"]
  },
  "指定输出路径": {
    "prefix": ["umirc-outputPath"],
    "body": ["outputPath: 'dist'"],
    "description": ["指定输出路径"]
  },
  "配置额外的 umi 插件": {
    "prefix": ["umirc-plugins"],
    "body": [
      "plugins: [",
      "  // npm 依赖",
      "  'umi-plugin-hello',",
      "  // 相对路径",
      "  './plugin',",
      "  // 绝对路径",
      "  `${__dirname}/plugin.js`,",
      "]"
    ],
    "description": [
      "配置额外的 umi 插件",
      "数组项为指向插件的路径，可以是 npm 依赖、相对路径或绝对路径。如果是相对路径，则会从项目根目录开始找。"
    ]
  },
  "用于配置额外的 umi 插件集": {
    "prefix": ["umirc-presets"],
    "body": ["presets: []"],
    "description": ["用于配置额外的 umi 插件集"]
  },
  "配置代理": {
    "prefix": ["umirc-proxy"],
    "body": [
      "proxy: {",
      "  '/api': {",
      "    'target': 'http://jsonplaceholder.typicode.com/',",
      "    'changeOrigin': true,",
      "    'pathRewrite': { '^/api' : '' },",
      "  },",
      "}"
    ],
    "description": ["配置代理"]
  },
  "配置 publicPath": {
    "prefix": ["umirc-publicPath"],
    "body": ["publicPath: '/'"],
    "description": ["配置 publicPath"]
  },
  "配置路由": {
    "prefix": ["umirc-routes"],
    "body": [
      "routes: [",
      "  {",
      "    path: '/',",
      "    component: '@/layouts/index',",
      "    routes: [",
      "      { path: '/user', redirect: '/user/login' },",
      "      { path: '/user/login', component: './user/login' },",
      "    ],",
      "  },",
      "],"
    ],
    "description": ["配置路由"]
  },
  "配置额外scripts": {
    "prefix": ["umirc-scripts"],
    "body": ["scripts: []"],
    "description": ["配置额外scripts"]
  },
  "配置额外 CSS": {
    "prefix": ["umirc-styles"],
    "body": [
      "styles: [",
      "  `body { color: red; }`,",
      "  `https://a.com/b.css`,",
      "],"
    ],
    "description": ["配置额外 CSS"]
  },
  "配置需要兼容的浏览器最低版本": {
    "prefix": ["umirc-targets"],
    "body": ["targets: {", "  ie: 11, // 兼容ie11", "},"],
    "description": [
      "配置需要兼容的浏览器最低版本",
      "配置的 targets 会和合并到默认值，不需要重复配置"
    ]
  },
  "配置主题，实际上是配 less 变量": {
    "prefix": ["umirc-theme"],
    "body": ["theme: {", "  '@primary-color': '#1DA57A',", "},"],
    "description": ["配置主题，实际上是配 less 变量"]
  },
  "配置标题": {
    "prefix": ["umirc-title"],
    "body": ["title: 'hi'"],
    "description": ["配置标题"]
  },
  "封装dva请求": {
    "prefix": ["!-dva-fetch"],
    "body": [
      "import { fetch } from 'dva'",
      "import { notification } from 'antd'",
      "import router from 'umi/router'",
      "",
      "const codeMessage = {",
      "  200: '服务器成功返回请求的数据。',",
      "  201: '新建或修改数据成功。',",
      "  202: '一个请求已经进入后台排队（异步任务）。',",
      "  204: '删除数据成功。',",
      "  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',",
      "  401: '用户没有权限（令牌、用户名、密码错误）。',",
      "  403: '用户得到授权，但是访问是被禁止的。',",
      "  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',",
      "  406: '请求的格式不可得。',",
      "  410: '请求的资源被永久删除，且不会再得到的。',",
      "  422: '当创建一个对象时，发生一个验证错误。',",
      "  500: '服务器发生错误，请检查服务器。',",
      "  502: '网关错误。',",
      "  503: '服务不可用，服务器暂时过载或维护。',",
      "  504: '网关超时。',",
      "}",
      "",
      "export default async function request(url, options) {",
      "  return await fetch(url, {",
      "    ...options,",
      "    headers: {",
      "      'Content-Type': 'application/json',",
      "    },",
      "  })",
      "    .then(checkStatus)",
      "    .catch(checkErrorStatus);",
      "}",
      "",
      "function checkStatus(response) {",
      "  if (response.status >= 200 && response.status < 300) {",
      "    return response.json();",
      "  }",
      "",
      "  const errortext = codeMessage[response.status] || response.statusText",
      "",
      "  // 提醒错误信息",
      "  notification.error({",
      "    message: `请求错误 ${response.status} ${response.url}`,",
      "    description: errortext,",
      "  })",
      "",
      "  // 抛出异常",
      "  const error = new Error(errortext);",
      "  error.name = response.status;",
      "  error.response = response;",
      "  throw error",
      "}",
      "",
      "function checkErrorStatus(err) {",
      "  if (err && err.response) {",
      "    // 拿到异常状态",
      "    const { status } = err.response;",
      "    if (status === 403) {",
      "      router.push('/exception/403');",
      "    }",
      "",
      "    if (status <= 504 && status >= 500) {",
      "      router.push('/exception/500');",
      "    }",
      "",
      "    if (status >= 404 && status <= 422) {",
      "      router.push('/exception/404');",
      "    }",
      "  }",
      "}"
    ],
    "description": ["封装dva请求"]
  },
  "dva关联导出": {
    "prefix": ["dva-export"],
    "body": [
      "import React from 'react'",
      "import { connect } from 'dva'",
      "const index = () => {",
      "  return (<>",
      "",
      "  </>)",
      "}",
      "export default connect(({ ${1:namespace} }) => ({ ...${1:namespace} }))(index)"
    ],
    "description": ["dva关联导出"]
  },
  "dva模板": {
    "prefix": ["!-dva-template"],
    "body": [
      "export default {",
      "  namespace: 'users',",
      "  state: {",
      "    list: [],",
      "    total: 0,",
      "    page: 1,",
      "    pageSize: 5,",
      "  },",
      "  reducers: {",
      "    // 操作state",
      "    setData(state, { payload: { list } }) {",
      "      return { ...state, list } // 第一个参数返回内容， 第二个为修改state中的哪个参数",
      "    },",
      "  },",
      "  effects: {",
      "    // *doSomething(dispatch传递的参数, { call, put })  call:回调方法，put 调 reducers中的方法, select: 获取 *doSomething()外部的参数 [*doSomething()无法直接获取外部状态]",
      "    *doSomething({ payload: { page } }, { call, put, select }) {",
      "      //                              users为需要获取的 namespace 中的状态",
      "      const pageSize = yield select(state => state.users.pageSize)",
      "      const res = yield call(callBack, { page, pageSize })",
      "      yield put({ type: 'setData', payload: { ...res } })",
      "    }",
      "  },",
      "  subscriptions: {",
      "    // 订阅(自执行)",
      "    setup({ dispatch, history }) {",
      "      // 判断当前的路径",
      "      return history.listen(({ pathname }) => {",
      "        if (pathname == '/users') {",
      "          dispatch({ type: 'doSomething' }, { payload: { page } }) // 调用effects中的方法",
      "        }",
      "      })",
      "    }",
      "  }",
      "}"
    ],
    "description": ["dva模板"]
  },
  "dva纯净模板": {
    "prefix": ["!-dva"],
    "body": [
      "export default {",
      "  namespace: 'users',",
      "  state: {",
      "    list: [],",
      "    total: 0,",
      "    page: 1,",
      "    pageSize: 5,",
      "  },",
      "  reducers: {},",
      "  effects: {},",
      "  subscriptions: {}",
      "}"
    ],
    "description": ["dva纯净模板"]
  }
}
