{
  "react": {
    "prefix": ["!-React"],
    "body": [
      "import React, { Component, Fragment } from 'react'",
      "",
      "class ${1:Demo} extends Component {",
      "  constructor(props) {",
      "    super(props)",
      "    this.state = {}",
      "  }",
      "  render () {",
      "    return (<Fragment>",
      "      ${0}",
      "    </Fragment>)",
      "  }",
      "}",
      "",
      "export default ${1:Demo}"
    ],
    "description": ["基础模板"]
  },
  "react子组件基础模板": {
    "prefix": ["!-React"],
    "body": [
      "import React, { Component, Finally } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "class ${1:App} extends Component {",
      "  render() {",
      "    return <Finally>{this.props.num}</Finally>",
      "  }",
      "}",
      "",
      "${1:App}.prototype = {",
      "  num: PropTypes.number",
      "}",
      "${1:App}.defaultProps = {",
      "  num: 10",
      "}",
      "export default ${1:App}"
    ],
    "description": ["react子组件基础模板"]
  },
  "this.setState": {
    "prefix": ["this.setState"],
    "body": [
      "this.setState((state,props)=>{",
      "    return{",
      "        ${2:count:state.count+1}",
      "    }",
      "}${1:,callback})"
    ],
    "description": ["this.setState"]
  },
  "handleChange": {
    "prefix": ["handleChange"],
    "body": [
      "handleChange = e => {",
      "  this.setState({ num: e.target.value })",
      "}"
    ],
    "description": ["handleChange", "表单快速双向绑定"]
  },
  "handleChange(一对多)": {
    "prefix": ["handleChange"],
    "body": [
      "handleChange = e => {",
      "  const target = e.target",
      "  const value = target.type === 'checkbox' ? target.checked : target.value",
      "  const name = target.name // 表单元素必须含有name且与state保持一致",
      "  this.setState({",
      "    [name]: value",
      "  })",
      "}"
    ],
    "description": [
      "handleChange(一对多)",
      "表单元素必须含有name",
      "表单快速双向绑定"
    ]
  },
  "ref": {
    "prefix": ["ref"],
    "body": ["this.txtRef = React.createRef()"],
    "description": [
      "ref非受控组件(直接操作DOM)",
      "在constructor中声明",
      "DOM直接ref={this.txtRef}"
    ]
  },
  "Fragment": {
    "prefix": ["Fragment"],
    "body": ["<Fragment>$0</Fragment>"],
    "description": ["Fragment占位符"]
  },
  "EventEmitter(自定义事件通信new)": {
    "prefix": ["tx-event-newEventEmitter"],
    "body": [
      "import { EventEmitter } from 'events'",
      "export default new EventEmitter()"
    ],
    "description": ["EventEmitter(自定义事件通信)", "新建events.js"]
  },
  "EventEmitter(自定义通信触发)": {
    "prefix": ["tx-event-emit"],
    "body": ["emitter.emit('${1:自定义事件名}')"],
    "description": ["EventEmitter(自定义通信触发)"]
  },
  "EventEmitter(自定义通信监听)": {
    "prefix": ["tx-event-addListener"],
    "body": [
      "// 写在constructor中",
      "emitter.addListener('${1:自定义事件名}',()=>{$0}"
    ],
    "description": ["EventEmitter(自定义通信监听)"]
  },
  "createContext(跨级组件通信)": {
    "prefix": ["tx-createContext"],
    "body": ["const { Provider, Consumer } = React.createContext()"],
    "description": ["createContext(跨级组件通信)"]
  },
  "Provider(跨级通信传递)": {
    "prefix": ["tx-Provider"],
    "body": ["<Provider value={${1:传递内容}}>${0}</Provider>"],
    "description": ["Provider(跨级通信传递)"]
  },
  "Consumer(跨级通信接收)": {
    "prefix": ["tx-Consumer"],
    "body": [
      "<Consumer>{ data => <span> 我是子节点:{data}</span> }</Consumer>"
    ],
    "description": ["Consumer(跨级通信接收)"]
  },
  "constructor": {
    "prefix": ["sm-constructor"],
    "body": ["constructor(props){", " super(props)", "}"],
    "description": ["constructor(挂载阶段生命周期)"]
  },
  "render": {
    "prefix": ["sm-render"],
    "body": [
      "render() {",
      "  return (",
      "    <${1|div,Fragment|}>",
      "      $0",
      "    </${1|div,Fragment|}>",
      "  )",
      "}"
    ],
    "description": ["render(挂载阶段/更新阶段生命周期)"]
  },
  "componentDidMount": {
    "prefix": ["sm-componentDidMount"],
    "body": ["componentDidMount(){$0}"],
    "description": ["componentDidMount(挂载阶段生命周期)", "一般发请求"]
  },
  "componentDidUpdata": {
    "prefix": ["sm-componentDidUpdate"],
    "body": [
      "componentDidUpdate (prevProps) {",
      "  // 如果使用 setState() 必须加 if 判断",
      "  // if(prevProps.data !== this.props.data) {",
      "  //   this.setState({})",
      "  // }",
      "}"
    ],
    "description": [
      "componentDidUpdata(更新阶段生命周期)",
      "组件更新(DOM渲染后)",
      "一般发请求/DOM操作"
    ]
  },
  "componentWillUnmount": {
    "prefix": ["sm-componentWillUnmount"],
    "body": ["componentWillUnmount(){$0}"],
    "description": [
      "componentWillUnmount(卸载阶段生命周期)",
      "一般清理第三方插件或定时器"
    ]
  },
  "shouldComponentUpdate": {
    "prefix": ["sm-shouldComponentUpdate"],
    "body": ["shouldComponentUpdate(nextProps, nextState){$0}"],
    "description": [
      "shouldComponentUpdate(更新阶段生命周期)",
      "是否更新render()",
      "默认return true"
    ]
  },
  "高阶组件": {
    "prefix": ["!-react-HOC-demo"],
    "body": [
      "import React, { Component } from 'react'\n",
      "// 创建高阶组件",
      "function withMouse(WrappendComponent) {",
      "  class Mouse extends Component {",
      "    state = {",
      "      x: 0,",
      "      y: 0",
      "    }",
      "    handleMouseMove = e => {",
      "      this.setState({ x: e.clientX, y: e.clientY })",
      "    }",
      "    componentDidMount() {",
      "      window.addEventListener('mousemove', this.handleMouseMove)",
      "    }",
      "    componentWillUnmount() {",
      "      window.removeEventListener('mousemove', this.handleMouseMove)",
      "    }",
      "    render() {",
      "      return (",
      "        <WrappendComponent {...this.state} {...this.props}></WrappendComponent>",
      "      )",
      "    }",
      "  }",
      "  return Mouse",
      "}",
      "export default withMouse"
    ],
    "description": ["高阶组件(获取鼠标位置)"]
  },
  "高阶组件模板": {
    "prefix": ["!-react-HOC"],
    "body": [
      "import React, { Component } from 'react'\n",
      "function with${1:App}(props) {",
      "  return function(WrappendComponent) {",
      "    return class extends Component {",
      "      state = {}",
      "      componentDidMount() {}",
      "      componentWillUnmount() {}",
      "      render() {",
      "        return (",
      "          <WrappendComponent {...this.state} {...this.props}></WrappendComponent>",
      "        )",
      "      }",
      "    }",
      "  }",
      "}",
      "export default with${1:App}"
    ],
    "description": [
      "高阶组件模板",
      "调用const Page = withApp(props)(WrappendComponent)"
    ]
  },
  "引入 react-router": {
    "prefix": ["route"],
    "body": [
      "import { BrowserRouter as Router, Route, Link } from 'react-router-dom'"
    ],
    "description": ["引入 react-router"]
  },
  "链接": {
    "prefix": ["route-link"],
    "body": ["<Link to='${1:/home/1}'>${2:首页}</Link>"],
    "description": ["链接"]
  },
  "路由容器": {
    "prefix": ["route"],
    "body": [
      "<Route path='${1:home/:id}' exact component={${2:展示的内容}}></Route>"
    ],
    "description": ["路由容器", "exact精准匹配模式"]
  },
  "嵌套路由容器": {
    "prefix": ["route"],
    "body": [
      "<Route",
      "  path='${1:第一层路径}'",
      "  render={() => (",
      "    <${1:Content}>",
      "      <Route path='${2:第一层路径默认展示组件}' exact component={${4:组件}}></Route>",
      "      <Route path='${3:/content/:itemid}' component={${4:组件}}></Route>",
      "    </${1:Content}>",
      "  )}",
      "></Route>"
    ],
    "description": ["嵌套路由容器"]
  },
  "接收路由参数": {
    "prefix": ["route-params"],
    "body": ["this.props.match.params.${1:id}"],
    "description": ["接收路由参数"]
  },
  "编程式导航": {
    "prefix": ["route-push"],
    "body": ["this.props.history.push('${1:/login}')"],
    "description": ["编程式导航"]
  },
  "Switch组件(只匹配第一个路由规则)": {
    "prefix": ["route-Switch"],
    "body": ["<Switch>${0}<Switch>"],
    "description": ["Switch组件", "只匹配第一个路由规则"]
  },
  "Redirect重定向": {
    "prefix": ["route-redirect"],
    "body": [
      "<Redirect to={{ pathname: '${1:路径}', search: '${2:参数}' }}></Redirect>"
    ],
    "description": ["Redirect重定向"]
  },
  "StateHook(类似constructor)": {
    "prefix": ["hook-useState"],
    "body": ["const [${1:count},${2:setCount}] = useState(${3:默认值})"],
    "description": ["StateHook(类似constructor)"]
  },
  "EffectHook": {
    "prefix": ["hook-useEffect"],
    "body": [
      "useEffect(()=>{",
      "  ${1}",
      "},[${2:判断更新内容是否相同需要更新，为空表示只在第一次渲染使用Effect}])"
    ],
    "description": ["EffectHook(类似componentDidMount+componentDidUpdata)"]
  },
  "ContextHook": {
    "prefix": ["hook-useContext"],
    "body": ["useContext(${1:.Provider组件})"],
    "description": ["ContextHook", "Provider,Consumer中代替Consumer"]
  },
  "MemoHook": {
    "prefix": ["hook-useMemo"],
    "body": ["useMemo(() => {$0}, [${1:检查内容}])"],
    "description": ["MemoHook"]
  },
  "ReducerHook": {
    "prefix": ["hook-useReducer"],
    "body": ["const [state, dispatch] = useReducer(reducer, initState)"],
    "description": ["ReducerHook"]
  },
  "reducer": {
    "prefix": ["reducer"],
    "body": [
      "function reducer(state, action) {",
      "  switch (action.type) {",
      "    case 'Add':",
      "      return { count: state.count + 1 }",
      "    case 'Sub':",
      "      return { count: state.count - 1 }",
      "    default:",
      "      throw new Error()",
      "  }",
      "}"
    ],
    "description": ["reducer"]
  }
}
